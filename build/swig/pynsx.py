# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pynsx')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pynsx')
    _pynsx = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pynsx', [dirname(__file__)])
        except ImportError:
            import _pynsx
            return _pynsx
        try:
            _mod = imp.load_module('_pynsx', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pynsx = swig_import_helper()
    del swig_import_helper
else:
    import _pynsx
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _pynsx.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pynsx.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pynsx.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pynsx.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pynsx.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pynsx.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pynsx.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pynsx.SwigPyIterator_copy(self)

    def next(self):
        return _pynsx.SwigPyIterator_next(self)

    def __next__(self):
        return _pynsx.SwigPyIterator___next__(self)

    def previous(self):
        return _pynsx.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pynsx.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pynsx.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pynsx.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pynsx.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pynsx.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pynsx.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pynsx.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pynsx.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_1d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_1d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_1d, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.vector_1d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.vector_1d___nonzero__(self)

    def __bool__(self):
        return _pynsx.vector_1d___bool__(self)

    def __len__(self):
        return _pynsx.vector_1d___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.vector_1d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.vector_1d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.vector_1d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.vector_1d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.vector_1d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.vector_1d___setitem__(self, *args)

    def pop(self):
        return _pynsx.vector_1d_pop(self)

    def append(self, x):
        return _pynsx.vector_1d_append(self, x)

    def empty(self):
        return _pynsx.vector_1d_empty(self)

    def size(self):
        return _pynsx.vector_1d_size(self)

    def swap(self, v):
        return _pynsx.vector_1d_swap(self, v)

    def begin(self):
        return _pynsx.vector_1d_begin(self)

    def end(self):
        return _pynsx.vector_1d_end(self)

    def rbegin(self):
        return _pynsx.vector_1d_rbegin(self)

    def rend(self):
        return _pynsx.vector_1d_rend(self)

    def clear(self):
        return _pynsx.vector_1d_clear(self)

    def get_allocator(self):
        return _pynsx.vector_1d_get_allocator(self)

    def pop_back(self):
        return _pynsx.vector_1d_pop_back(self)

    def erase(self, *args):
        return _pynsx.vector_1d_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_vector_1d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.vector_1d_push_back(self, x)

    def front(self):
        return _pynsx.vector_1d_front(self)

    def back(self):
        return _pynsx.vector_1d_back(self)

    def assign(self, n, x):
        return _pynsx.vector_1d_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.vector_1d_resize(self, *args)

    def insert(self, *args):
        return _pynsx.vector_1d_insert(self, *args)

    def reserve(self, n):
        return _pynsx.vector_1d_reserve(self, n)

    def capacity(self):
        return _pynsx.vector_1d_capacity(self)
    __swig_destroy__ = _pynsx.delete_vector_1d
    __del__ = lambda self: None
vector_1d_swigregister = _pynsx.vector_1d_swigregister
vector_1d_swigregister(vector_1d)

class vector_2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_2d, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.vector_2d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.vector_2d___nonzero__(self)

    def __bool__(self):
        return _pynsx.vector_2d___bool__(self)

    def __len__(self):
        return _pynsx.vector_2d___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.vector_2d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.vector_2d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.vector_2d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.vector_2d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.vector_2d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.vector_2d___setitem__(self, *args)

    def pop(self):
        return _pynsx.vector_2d_pop(self)

    def append(self, x):
        return _pynsx.vector_2d_append(self, x)

    def empty(self):
        return _pynsx.vector_2d_empty(self)

    def size(self):
        return _pynsx.vector_2d_size(self)

    def swap(self, v):
        return _pynsx.vector_2d_swap(self, v)

    def begin(self):
        return _pynsx.vector_2d_begin(self)

    def end(self):
        return _pynsx.vector_2d_end(self)

    def rbegin(self):
        return _pynsx.vector_2d_rbegin(self)

    def rend(self):
        return _pynsx.vector_2d_rend(self)

    def clear(self):
        return _pynsx.vector_2d_clear(self)

    def get_allocator(self):
        return _pynsx.vector_2d_get_allocator(self)

    def pop_back(self):
        return _pynsx.vector_2d_pop_back(self)

    def erase(self, *args):
        return _pynsx.vector_2d_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_vector_2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.vector_2d_push_back(self, x)

    def front(self):
        return _pynsx.vector_2d_front(self)

    def back(self):
        return _pynsx.vector_2d_back(self)

    def assign(self, n, x):
        return _pynsx.vector_2d_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.vector_2d_resize(self, *args)

    def insert(self, *args):
        return _pynsx.vector_2d_insert(self, *args)

    def reserve(self, n):
        return _pynsx.vector_2d_reserve(self, n)

    def capacity(self):
        return _pynsx.vector_2d_capacity(self)
    __swig_destroy__ = _pynsx.delete_vector_2d
    __del__ = lambda self: None
vector_2d_swigregister = _pynsx.vector_2d_swigregister
vector_2d_swigregister(vector_2d)

class vector_1i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_1i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_1i, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.vector_1i_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.vector_1i___nonzero__(self)

    def __bool__(self):
        return _pynsx.vector_1i___bool__(self)

    def __len__(self):
        return _pynsx.vector_1i___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.vector_1i___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.vector_1i___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.vector_1i___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.vector_1i___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.vector_1i___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.vector_1i___setitem__(self, *args)

    def pop(self):
        return _pynsx.vector_1i_pop(self)

    def append(self, x):
        return _pynsx.vector_1i_append(self, x)

    def empty(self):
        return _pynsx.vector_1i_empty(self)

    def size(self):
        return _pynsx.vector_1i_size(self)

    def swap(self, v):
        return _pynsx.vector_1i_swap(self, v)

    def begin(self):
        return _pynsx.vector_1i_begin(self)

    def end(self):
        return _pynsx.vector_1i_end(self)

    def rbegin(self):
        return _pynsx.vector_1i_rbegin(self)

    def rend(self):
        return _pynsx.vector_1i_rend(self)

    def clear(self):
        return _pynsx.vector_1i_clear(self)

    def get_allocator(self):
        return _pynsx.vector_1i_get_allocator(self)

    def pop_back(self):
        return _pynsx.vector_1i_pop_back(self)

    def erase(self, *args):
        return _pynsx.vector_1i_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_vector_1i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.vector_1i_push_back(self, x)

    def front(self):
        return _pynsx.vector_1i_front(self)

    def back(self):
        return _pynsx.vector_1i_back(self)

    def assign(self, n, x):
        return _pynsx.vector_1i_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.vector_1i_resize(self, *args)

    def insert(self, *args):
        return _pynsx.vector_1i_insert(self, *args)

    def reserve(self, n):
        return _pynsx.vector_1i_reserve(self, n)

    def capacity(self):
        return _pynsx.vector_1i_capacity(self)
    __swig_destroy__ = _pynsx.delete_vector_1i
    __del__ = lambda self: None
vector_1i_swigregister = _pynsx.vector_1i_swigregister
vector_1i_swigregister(vector_1i)

class vector_2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_2i, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.vector_2i_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.vector_2i___nonzero__(self)

    def __bool__(self):
        return _pynsx.vector_2i___bool__(self)

    def __len__(self):
        return _pynsx.vector_2i___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.vector_2i___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.vector_2i___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.vector_2i___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.vector_2i___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.vector_2i___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.vector_2i___setitem__(self, *args)

    def pop(self):
        return _pynsx.vector_2i_pop(self)

    def append(self, x):
        return _pynsx.vector_2i_append(self, x)

    def empty(self):
        return _pynsx.vector_2i_empty(self)

    def size(self):
        return _pynsx.vector_2i_size(self)

    def swap(self, v):
        return _pynsx.vector_2i_swap(self, v)

    def begin(self):
        return _pynsx.vector_2i_begin(self)

    def end(self):
        return _pynsx.vector_2i_end(self)

    def rbegin(self):
        return _pynsx.vector_2i_rbegin(self)

    def rend(self):
        return _pynsx.vector_2i_rend(self)

    def clear(self):
        return _pynsx.vector_2i_clear(self)

    def get_allocator(self):
        return _pynsx.vector_2i_get_allocator(self)

    def pop_back(self):
        return _pynsx.vector_2i_pop_back(self)

    def erase(self, *args):
        return _pynsx.vector_2i_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_vector_2i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.vector_2i_push_back(self, x)

    def front(self):
        return _pynsx.vector_2i_front(self)

    def back(self):
        return _pynsx.vector_2i_back(self)

    def assign(self, n, x):
        return _pynsx.vector_2i_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.vector_2i_resize(self, *args)

    def insert(self, *args):
        return _pynsx.vector_2i_insert(self, *args)

    def reserve(self, n):
        return _pynsx.vector_2i_reserve(self, n)

    def capacity(self):
        return _pynsx.vector_2i_capacity(self)
    __swig_destroy__ = _pynsx.delete_vector_2i
    __del__ = lambda self: None
vector_2i_swigregister = _pynsx.vector_2i_swigregister
vector_2i_swigregister(vector_2i)

class vector_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.vector_string___nonzero__(self)

    def __bool__(self):
        return _pynsx.vector_string___bool__(self)

    def __len__(self):
        return _pynsx.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.vector_string___setitem__(self, *args)

    def pop(self):
        return _pynsx.vector_string_pop(self)

    def append(self, x):
        return _pynsx.vector_string_append(self, x)

    def empty(self):
        return _pynsx.vector_string_empty(self)

    def size(self):
        return _pynsx.vector_string_size(self)

    def swap(self, v):
        return _pynsx.vector_string_swap(self, v)

    def begin(self):
        return _pynsx.vector_string_begin(self)

    def end(self):
        return _pynsx.vector_string_end(self)

    def rbegin(self):
        return _pynsx.vector_string_rbegin(self)

    def rend(self):
        return _pynsx.vector_string_rend(self)

    def clear(self):
        return _pynsx.vector_string_clear(self)

    def get_allocator(self):
        return _pynsx.vector_string_get_allocator(self)

    def pop_back(self):
        return _pynsx.vector_string_pop_back(self)

    def erase(self, *args):
        return _pynsx.vector_string_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_vector_string(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.vector_string_push_back(self, x)

    def front(self):
        return _pynsx.vector_string_front(self)

    def back(self):
        return _pynsx.vector_string_back(self)

    def assign(self, n, x):
        return _pynsx.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.vector_string_resize(self, *args)

    def insert(self, *args):
        return _pynsx.vector_string_insert(self, *args)

    def reserve(self, n):
        return _pynsx.vector_string_reserve(self, n)

    def capacity(self):
        return _pynsx.vector_string_capacity(self)
    __swig_destroy__ = _pynsx.delete_vector_string
    __del__ = lambda self: None
vector_string_swigregister = _pynsx.vector_string_swigregister
vector_string_swigregister(vector_string)

class vectorMatrixXd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorMatrixXd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorMatrixXd, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.vectorMatrixXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.vectorMatrixXd___nonzero__(self)

    def __bool__(self):
        return _pynsx.vectorMatrixXd___bool__(self)

    def __len__(self):
        return _pynsx.vectorMatrixXd___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.vectorMatrixXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.vectorMatrixXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.vectorMatrixXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.vectorMatrixXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.vectorMatrixXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.vectorMatrixXd___setitem__(self, *args)

    def pop(self):
        return _pynsx.vectorMatrixXd_pop(self)

    def append(self, x):
        return _pynsx.vectorMatrixXd_append(self, x)

    def empty(self):
        return _pynsx.vectorMatrixXd_empty(self)

    def size(self):
        return _pynsx.vectorMatrixXd_size(self)

    def swap(self, v):
        return _pynsx.vectorMatrixXd_swap(self, v)

    def begin(self):
        return _pynsx.vectorMatrixXd_begin(self)

    def end(self):
        return _pynsx.vectorMatrixXd_end(self)

    def rbegin(self):
        return _pynsx.vectorMatrixXd_rbegin(self)

    def rend(self):
        return _pynsx.vectorMatrixXd_rend(self)

    def clear(self):
        return _pynsx.vectorMatrixXd_clear(self)

    def get_allocator(self):
        return _pynsx.vectorMatrixXd_get_allocator(self)

    def pop_back(self):
        return _pynsx.vectorMatrixXd_pop_back(self)

    def erase(self, *args):
        return _pynsx.vectorMatrixXd_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_vectorMatrixXd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.vectorMatrixXd_push_back(self, x)

    def front(self):
        return _pynsx.vectorMatrixXd_front(self)

    def back(self):
        return _pynsx.vectorMatrixXd_back(self)

    def assign(self, n, x):
        return _pynsx.vectorMatrixXd_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.vectorMatrixXd_resize(self, *args)

    def insert(self, *args):
        return _pynsx.vectorMatrixXd_insert(self, *args)

    def reserve(self, n):
        return _pynsx.vectorMatrixXd_reserve(self, n)

    def capacity(self):
        return _pynsx.vectorMatrixXd_capacity(self)
    __swig_destroy__ = _pynsx.delete_vectorMatrixXd
    __del__ = lambda self: None
vectorMatrixXd_swigregister = _pynsx.vectorMatrixXd_swigregister
vectorMatrixXd_swigregister(vectorMatrixXd)

class vectorVectorXd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVectorXd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVectorXd, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.vectorVectorXd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.vectorVectorXd___nonzero__(self)

    def __bool__(self):
        return _pynsx.vectorVectorXd___bool__(self)

    def __len__(self):
        return _pynsx.vectorVectorXd___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.vectorVectorXd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.vectorVectorXd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.vectorVectorXd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.vectorVectorXd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.vectorVectorXd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.vectorVectorXd___setitem__(self, *args)

    def pop(self):
        return _pynsx.vectorVectorXd_pop(self)

    def append(self, x):
        return _pynsx.vectorVectorXd_append(self, x)

    def empty(self):
        return _pynsx.vectorVectorXd_empty(self)

    def size(self):
        return _pynsx.vectorVectorXd_size(self)

    def swap(self, v):
        return _pynsx.vectorVectorXd_swap(self, v)

    def begin(self):
        return _pynsx.vectorVectorXd_begin(self)

    def end(self):
        return _pynsx.vectorVectorXd_end(self)

    def rbegin(self):
        return _pynsx.vectorVectorXd_rbegin(self)

    def rend(self):
        return _pynsx.vectorVectorXd_rend(self)

    def clear(self):
        return _pynsx.vectorVectorXd_clear(self)

    def get_allocator(self):
        return _pynsx.vectorVectorXd_get_allocator(self)

    def pop_back(self):
        return _pynsx.vectorVectorXd_pop_back(self)

    def erase(self, *args):
        return _pynsx.vectorVectorXd_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_vectorVectorXd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.vectorVectorXd_push_back(self, x)

    def front(self):
        return _pynsx.vectorVectorXd_front(self)

    def back(self):
        return _pynsx.vectorVectorXd_back(self)

    def assign(self, n, x):
        return _pynsx.vectorVectorXd_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.vectorVectorXd_resize(self, *args)

    def insert(self, *args):
        return _pynsx.vectorVectorXd_insert(self, *args)

    def reserve(self, n):
        return _pynsx.vectorVectorXd_reserve(self, n)

    def capacity(self):
        return _pynsx.vectorVectorXd_capacity(self)
    __swig_destroy__ = _pynsx.delete_vectorVectorXd
    __del__ = lambda self: None
vectorVectorXd_swigregister = _pynsx.vectorVectorXd_swigregister
vectorVectorXd_swigregister(vectorVectorXd)

class vectorVector3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVector3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVector3d, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.vectorVector3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.vectorVector3d___nonzero__(self)

    def __bool__(self):
        return _pynsx.vectorVector3d___bool__(self)

    def __len__(self):
        return _pynsx.vectorVector3d___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.vectorVector3d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.vectorVector3d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.vectorVector3d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.vectorVector3d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.vectorVector3d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.vectorVector3d___setitem__(self, *args)

    def pop(self):
        return _pynsx.vectorVector3d_pop(self)

    def append(self, x):
        return _pynsx.vectorVector3d_append(self, x)

    def empty(self):
        return _pynsx.vectorVector3d_empty(self)

    def size(self):
        return _pynsx.vectorVector3d_size(self)

    def swap(self, v):
        return _pynsx.vectorVector3d_swap(self, v)

    def begin(self):
        return _pynsx.vectorVector3d_begin(self)

    def end(self):
        return _pynsx.vectorVector3d_end(self)

    def rbegin(self):
        return _pynsx.vectorVector3d_rbegin(self)

    def rend(self):
        return _pynsx.vectorVector3d_rend(self)

    def clear(self):
        return _pynsx.vectorVector3d_clear(self)

    def get_allocator(self):
        return _pynsx.vectorVector3d_get_allocator(self)

    def pop_back(self):
        return _pynsx.vectorVector3d_pop_back(self)

    def erase(self, *args):
        return _pynsx.vectorVector3d_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_vectorVector3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.vectorVector3d_push_back(self, x)

    def front(self):
        return _pynsx.vectorVector3d_front(self)

    def back(self):
        return _pynsx.vectorVector3d_back(self)

    def assign(self, n, x):
        return _pynsx.vectorVector3d_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.vectorVector3d_resize(self, *args)

    def insert(self, *args):
        return _pynsx.vectorVector3d_insert(self, *args)

    def reserve(self, n):
        return _pynsx.vectorVector3d_reserve(self, n)

    def capacity(self):
        return _pynsx.vectorVector3d_capacity(self)
    __swig_destroy__ = _pynsx.delete_vectorVector3d
    __del__ = lambda self: None
vectorVector3d_swigregister = _pynsx.vectorVector3d_swigregister
vectorVector3d_swigregister(vectorVector3d)

class vectorRowVector3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorRowVector3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorRowVector3d, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.vectorRowVector3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.vectorRowVector3d___nonzero__(self)

    def __bool__(self):
        return _pynsx.vectorRowVector3d___bool__(self)

    def __len__(self):
        return _pynsx.vectorRowVector3d___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.vectorRowVector3d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.vectorRowVector3d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.vectorRowVector3d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.vectorRowVector3d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.vectorRowVector3d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.vectorRowVector3d___setitem__(self, *args)

    def pop(self):
        return _pynsx.vectorRowVector3d_pop(self)

    def append(self, x):
        return _pynsx.vectorRowVector3d_append(self, x)

    def empty(self):
        return _pynsx.vectorRowVector3d_empty(self)

    def size(self):
        return _pynsx.vectorRowVector3d_size(self)

    def swap(self, v):
        return _pynsx.vectorRowVector3d_swap(self, v)

    def begin(self):
        return _pynsx.vectorRowVector3d_begin(self)

    def end(self):
        return _pynsx.vectorRowVector3d_end(self)

    def rbegin(self):
        return _pynsx.vectorRowVector3d_rbegin(self)

    def rend(self):
        return _pynsx.vectorRowVector3d_rend(self)

    def clear(self):
        return _pynsx.vectorRowVector3d_clear(self)

    def get_allocator(self):
        return _pynsx.vectorRowVector3d_get_allocator(self)

    def pop_back(self):
        return _pynsx.vectorRowVector3d_pop_back(self)

    def erase(self, *args):
        return _pynsx.vectorRowVector3d_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_vectorRowVector3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.vectorRowVector3d_push_back(self, x)

    def front(self):
        return _pynsx.vectorRowVector3d_front(self)

    def back(self):
        return _pynsx.vectorRowVector3d_back(self)

    def assign(self, n, x):
        return _pynsx.vectorRowVector3d_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.vectorRowVector3d_resize(self, *args)

    def insert(self, *args):
        return _pynsx.vectorRowVector3d_insert(self, *args)

    def reserve(self, n):
        return _pynsx.vectorRowVector3d_reserve(self, n)

    def capacity(self):
        return _pynsx.vectorRowVector3d_capacity(self)
    __swig_destroy__ = _pynsx.delete_vectorRowVector3d
    __del__ = lambda self: None
vectorRowVector3d_swigregister = _pynsx.vectorRowVector3d_swigregister
vectorRowVector3d_swigregister(vectorRowVector3d)

ChemicalPropertyType_String = _pynsx.ChemicalPropertyType_String
ChemicalPropertyType_Int = _pynsx.ChemicalPropertyType_Int
ChemicalPropertyType_Double = _pynsx.ChemicalPropertyType_Double
ChemicalPropertyType_Complex = _pynsx.ChemicalPropertyType_Complex
ChemicalPropertyType_Bool = _pynsx.ChemicalPropertyType_Bool
Direction_CW = _pynsx.Direction_CW
Direction_CCW = _pynsx.Direction_CCW
PointType_REGION = _pynsx.PointType_REGION
PointType_BACKGROUND = _pynsx.PointType_BACKGROUND
PointType_EXCLUDED = _pynsx.PointType_EXCLUDED
class UnitCellList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitCellList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitCellList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.UnitCellList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.UnitCellList___nonzero__(self)

    def __bool__(self):
        return _pynsx.UnitCellList___bool__(self)

    def __len__(self):
        return _pynsx.UnitCellList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.UnitCellList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.UnitCellList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.UnitCellList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.UnitCellList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.UnitCellList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.UnitCellList___setitem__(self, *args)

    def pop(self):
        return _pynsx.UnitCellList_pop(self)

    def append(self, x):
        return _pynsx.UnitCellList_append(self, x)

    def empty(self):
        return _pynsx.UnitCellList_empty(self)

    def size(self):
        return _pynsx.UnitCellList_size(self)

    def swap(self, v):
        return _pynsx.UnitCellList_swap(self, v)

    def begin(self):
        return _pynsx.UnitCellList_begin(self)

    def end(self):
        return _pynsx.UnitCellList_end(self)

    def rbegin(self):
        return _pynsx.UnitCellList_rbegin(self)

    def rend(self):
        return _pynsx.UnitCellList_rend(self)

    def clear(self):
        return _pynsx.UnitCellList_clear(self)

    def get_allocator(self):
        return _pynsx.UnitCellList_get_allocator(self)

    def pop_back(self):
        return _pynsx.UnitCellList_pop_back(self)

    def erase(self, *args):
        return _pynsx.UnitCellList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_UnitCellList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.UnitCellList_push_back(self, x)

    def front(self):
        return _pynsx.UnitCellList_front(self)

    def back(self):
        return _pynsx.UnitCellList_back(self)

    def assign(self, n, x):
        return _pynsx.UnitCellList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.UnitCellList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.UnitCellList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.UnitCellList_reserve(self, n)

    def capacity(self):
        return _pynsx.UnitCellList_capacity(self)
    __swig_destroy__ = _pynsx.delete_UnitCellList
    __del__ = lambda self: None
UnitCellList_swigregister = _pynsx.UnitCellList_swigregister
UnitCellList_swigregister(UnitCellList)
cvar = _pynsx.cvar
__version__ = cvar.__version__
__commit_id__ = cvar.__commit_id__
__commit_date__ = cvar.__commit_date__

class DirectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirectVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_DirectVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_DirectVector
    __del__ = lambda self: None

    def vector(self):
        return _pynsx.DirectVector_vector(self)

    def __call__(self, *args):
        return _pynsx.DirectVector___call__(self, *args)

    def _print(self, os):
        return _pynsx.DirectVector__print(self, os)
DirectVector_swigregister = _pynsx.DirectVector_swigregister
DirectVector_swigregister(DirectVector)

class DirectVectorList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectVectorList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirectVectorList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.DirectVectorList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.DirectVectorList___nonzero__(self)

    def __bool__(self):
        return _pynsx.DirectVectorList___bool__(self)

    def __len__(self):
        return _pynsx.DirectVectorList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.DirectVectorList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.DirectVectorList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.DirectVectorList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.DirectVectorList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.DirectVectorList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.DirectVectorList___setitem__(self, *args)

    def pop(self):
        return _pynsx.DirectVectorList_pop(self)

    def append(self, x):
        return _pynsx.DirectVectorList_append(self, x)

    def empty(self):
        return _pynsx.DirectVectorList_empty(self)

    def size(self):
        return _pynsx.DirectVectorList_size(self)

    def swap(self, v):
        return _pynsx.DirectVectorList_swap(self, v)

    def begin(self):
        return _pynsx.DirectVectorList_begin(self)

    def end(self):
        return _pynsx.DirectVectorList_end(self)

    def rbegin(self):
        return _pynsx.DirectVectorList_rbegin(self)

    def rend(self):
        return _pynsx.DirectVectorList_rend(self)

    def clear(self):
        return _pynsx.DirectVectorList_clear(self)

    def get_allocator(self):
        return _pynsx.DirectVectorList_get_allocator(self)

    def pop_back(self):
        return _pynsx.DirectVectorList_pop_back(self)

    def erase(self, *args):
        return _pynsx.DirectVectorList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_DirectVectorList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.DirectVectorList_push_back(self, x)

    def front(self):
        return _pynsx.DirectVectorList_front(self)

    def back(self):
        return _pynsx.DirectVectorList_back(self)

    def assign(self, n, x):
        return _pynsx.DirectVectorList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.DirectVectorList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.DirectVectorList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.DirectVectorList_reserve(self, n)

    def capacity(self):
        return _pynsx.DirectVectorList_capacity(self)
    __swig_destroy__ = _pynsx.delete_DirectVectorList
    __del__ = lambda self: None
DirectVectorList_swigregister = _pynsx.DirectVectorList_swigregister
DirectVectorList_swigregister(DirectVectorList)

class ReciprocalVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReciprocalVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReciprocalVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_ReciprocalVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_ReciprocalVector
    __del__ = lambda self: None

    def rowVector(self):
        return _pynsx.ReciprocalVector_rowVector(self)

    def __call__(self, *args):
        return _pynsx.ReciprocalVector___call__(self, *args)

    def _print(self, os):
        return _pynsx.ReciprocalVector__print(self, os)
ReciprocalVector_swigregister = _pynsx.ReciprocalVector_swigregister
ReciprocalVector_swigregister(ReciprocalVector)

class ReciprocalVectorList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReciprocalVectorList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReciprocalVectorList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.ReciprocalVectorList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.ReciprocalVectorList___nonzero__(self)

    def __bool__(self):
        return _pynsx.ReciprocalVectorList___bool__(self)

    def __len__(self):
        return _pynsx.ReciprocalVectorList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.ReciprocalVectorList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.ReciprocalVectorList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.ReciprocalVectorList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.ReciprocalVectorList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.ReciprocalVectorList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.ReciprocalVectorList___setitem__(self, *args)

    def pop(self):
        return _pynsx.ReciprocalVectorList_pop(self)

    def append(self, x):
        return _pynsx.ReciprocalVectorList_append(self, x)

    def empty(self):
        return _pynsx.ReciprocalVectorList_empty(self)

    def size(self):
        return _pynsx.ReciprocalVectorList_size(self)

    def swap(self, v):
        return _pynsx.ReciprocalVectorList_swap(self, v)

    def begin(self):
        return _pynsx.ReciprocalVectorList_begin(self)

    def end(self):
        return _pynsx.ReciprocalVectorList_end(self)

    def rbegin(self):
        return _pynsx.ReciprocalVectorList_rbegin(self)

    def rend(self):
        return _pynsx.ReciprocalVectorList_rend(self)

    def clear(self):
        return _pynsx.ReciprocalVectorList_clear(self)

    def get_allocator(self):
        return _pynsx.ReciprocalVectorList_get_allocator(self)

    def pop_back(self):
        return _pynsx.ReciprocalVectorList_pop_back(self)

    def erase(self, *args):
        return _pynsx.ReciprocalVectorList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_ReciprocalVectorList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.ReciprocalVectorList_push_back(self, x)

    def front(self):
        return _pynsx.ReciprocalVectorList_front(self)

    def back(self):
        return _pynsx.ReciprocalVectorList_back(self)

    def assign(self, n, x):
        return _pynsx.ReciprocalVectorList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.ReciprocalVectorList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.ReciprocalVectorList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.ReciprocalVectorList_reserve(self, n)

    def capacity(self):
        return _pynsx.ReciprocalVectorList_capacity(self)
    __swig_destroy__ = _pynsx.delete_ReciprocalVectorList
    __del__ = lambda self: None
ReciprocalVectorList_swigregister = _pynsx.ReciprocalVectorList_swigregister
ReciprocalVectorList_swigregister(ReciprocalVectorList)

class ReciprocalVectorQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReciprocalVectorQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReciprocalVectorQueue, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.ReciprocalVectorQueue_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.ReciprocalVectorQueue___nonzero__(self)

    def __bool__(self):
        return _pynsx.ReciprocalVectorQueue___bool__(self)

    def __len__(self):
        return _pynsx.ReciprocalVectorQueue___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.ReciprocalVectorQueue___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.ReciprocalVectorQueue___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.ReciprocalVectorQueue___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.ReciprocalVectorQueue___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.ReciprocalVectorQueue___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.ReciprocalVectorQueue___setitem__(self, *args)

    def pop(self):
        return _pynsx.ReciprocalVectorQueue_pop(self)

    def append(self, x):
        return _pynsx.ReciprocalVectorQueue_append(self, x)

    def empty(self):
        return _pynsx.ReciprocalVectorQueue_empty(self)

    def size(self):
        return _pynsx.ReciprocalVectorQueue_size(self)

    def swap(self, v):
        return _pynsx.ReciprocalVectorQueue_swap(self, v)

    def begin(self):
        return _pynsx.ReciprocalVectorQueue_begin(self)

    def end(self):
        return _pynsx.ReciprocalVectorQueue_end(self)

    def rbegin(self):
        return _pynsx.ReciprocalVectorQueue_rbegin(self)

    def rend(self):
        return _pynsx.ReciprocalVectorQueue_rend(self)

    def clear(self):
        return _pynsx.ReciprocalVectorQueue_clear(self)

    def get_allocator(self):
        return _pynsx.ReciprocalVectorQueue_get_allocator(self)

    def pop_back(self):
        return _pynsx.ReciprocalVectorQueue_pop_back(self)

    def erase(self, *args):
        return _pynsx.ReciprocalVectorQueue_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_ReciprocalVectorQueue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.ReciprocalVectorQueue_push_back(self, x)

    def front(self):
        return _pynsx.ReciprocalVectorQueue_front(self)

    def back(self):
        return _pynsx.ReciprocalVectorQueue_back(self)

    def assign(self, n, x):
        return _pynsx.ReciprocalVectorQueue_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.ReciprocalVectorQueue_resize(self, *args)

    def insert(self, *args):
        return _pynsx.ReciprocalVectorQueue_insert(self, *args)

    def pop_front(self):
        return _pynsx.ReciprocalVectorQueue_pop_front(self)

    def push_front(self, x):
        return _pynsx.ReciprocalVectorQueue_push_front(self, x)
    __swig_destroy__ = _pynsx.delete_ReciprocalVectorQueue
    __del__ = lambda self: None
ReciprocalVectorQueue_swigregister = _pynsx.ReciprocalVectorQueue_swigregister
ReciprocalVectorQueue_swigregister(ReciprocalVectorQueue)

class Axis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Axis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Axis, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pynsx.Axis_create)
    else:
        create = _pynsx.Axis_create
    __swig_destroy__ = _pynsx.delete_Axis
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.Axis_clone(self)

    def setName(self, name):
        return _pynsx.Axis_setName(self, name)

    def name(self):
        return _pynsx.Axis_name(self)

    def setAxis(self, axis):
        return _pynsx.Axis_setAxis(self, axis)

    def axis(self):
        return _pynsx.Axis_axis(self)

    def id(self):
        return _pynsx.Axis_id(self)

    def setId(self, id):
        return _pynsx.Axis_setId(self, id)

    def affineMatrix(self, value):
        return _pynsx.Axis_affineMatrix(self, value)

    def transform(self, v, value):
        return _pynsx.Axis_transform(self, v, value)

    def setPhysical(self, physical):
        return _pynsx.Axis_setPhysical(self, physical)

    def physical(self):
        return _pynsx.Axis_physical(self)

    def printSelf(self, os):
        return _pynsx.Axis_printSelf(self, os)
Axis_swigregister = _pynsx.Axis_swigregister
Axis_swigregister(Axis)

def Axis_create(node):
    return _pynsx.Axis_create(node)
Axis_create = _pynsx.Axis_create

class RotAxis(Axis):
    __swig_setmethods__ = {}
    for _s in [Axis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [Axis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotAxis, name)
    __repr__ = _swig_repr
    Direction_CW = _pynsx.RotAxis_Direction_CW
    Direction_CCW = _pynsx.RotAxis_Direction_CCW
    if _newclass:
        create = staticmethod(_pynsx.RotAxis_create)
    else:
        create = _pynsx.RotAxis_create

    def __init__(self, *args):
        this = _pynsx.new_RotAxis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_RotAxis
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.RotAxis_clone(self)

    def setRotationDirection(self, arg2):
        return _pynsx.RotAxis_setRotationDirection(self, arg2)

    def rotationDirection(self):
        return _pynsx.RotAxis_rotationDirection(self)

    def rotationMatrix(self, angle):
        return _pynsx.RotAxis_rotationMatrix(self, angle)

    def affineMatrix(self, angle):
        return _pynsx.RotAxis_affineMatrix(self, angle)

    def quaternion(self, angle):
        return _pynsx.RotAxis_quaternion(self, angle)

    def printSelf(self, os):
        return _pynsx.RotAxis_printSelf(self, os)
RotAxis_swigregister = _pynsx.RotAxis_swigregister
RotAxis_swigregister(RotAxis)

def RotAxis_create(node):
    return _pynsx.RotAxis_create(node)
RotAxis_create = _pynsx.RotAxis_create

class TransAxis(Axis):
    __swig_setmethods__ = {}
    for _s in [Axis]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [Axis]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransAxis, name)
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pynsx.TransAxis_create)
    else:
        create = _pynsx.TransAxis_create

    def __init__(self, *args):
        this = _pynsx.new_TransAxis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_TransAxis
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.TransAxis_clone(self)

    def affineMatrix(self, value):
        return _pynsx.TransAxis_affineMatrix(self, value)

    def printSelf(self, os):
        return _pynsx.TransAxis_printSelf(self, os)
TransAxis_swigregister = _pynsx.TransAxis_swigregister
TransAxis_swigregister(TransAxis)

def TransAxis_create(node):
    return _pynsx.TransAxis_create(node)
TransAxis_create = _pynsx.TransAxis_create

class Gonio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gonio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gonio, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Gonio(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_Gonio
    __del__ = lambda self: None

    def nAxes(self):
        return _pynsx.Gonio_nAxes(self)

    def axis(self, *args):
        return _pynsx.Gonio_axis(self, *args)

    def affineMatrix(self, values):
        return _pynsx.Gonio_affineMatrix(self, values)

    def transform(self, v, state):
        return _pynsx.Gonio_transform(self, v, state)
Gonio_swigregister = _pynsx.Gonio_swigregister
Gonio_swigregister(Gonio)

class Component(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Component, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        return _pynsx.Component_clone(self)
    __swig_destroy__ = _pynsx.delete_Component
    __del__ = lambda self: None

    def name(self):
        return _pynsx.Component_name(self)

    def setName(self, name):
        return _pynsx.Component_setName(self, name)

    def gonio(self, *args):
        return _pynsx.Component_gonio(self, *args)
Component_swigregister = _pynsx.Component_swigregister
Component_swigregister(Component)

class Monochromator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Monochromator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Monochromator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pynsx.delete_Monochromator
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pynsx.new_Monochromator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def name(self):
        return _pynsx.Monochromator_name(self)

    def setName(self, name):
        return _pynsx.Monochromator_setName(self, name)

    def wavelength(self):
        return _pynsx.Monochromator_wavelength(self)

    def setWavelength(self, wavelength):
        return _pynsx.Monochromator_setWavelength(self, wavelength)

    def fullWidthHalfMaximum(self):
        return _pynsx.Monochromator_fullWidthHalfMaximum(self)

    def setFullWidthHalfMaximum(self, fwhm):
        return _pynsx.Monochromator_setFullWidthHalfMaximum(self, fwhm)

    def width(self):
        return _pynsx.Monochromator_width(self)

    def setWidth(self, width):
        return _pynsx.Monochromator_setWidth(self, width)

    def height(self):
        return _pynsx.Monochromator_height(self)

    def setHeight(self, height):
        return _pynsx.Monochromator_setHeight(self, height)

    def __eq__(self, other):
        return _pynsx.Monochromator___eq__(self, other)

    def ki(self):
        return _pynsx.Monochromator_ki(self)
Monochromator_swigregister = _pynsx.Monochromator_swigregister
Monochromator_swigregister(Monochromator)

class Source(Component):
    __swig_setmethods__ = {}
    for _s in [Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Source, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Source, name)
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pynsx.Source_create)
    else:
        create = _pynsx.Source_create

    def __init__(self, *args):
        this = _pynsx.new_Source(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _pynsx.Source_clone(self)
    __swig_destroy__ = _pynsx.delete_Source
    __del__ = lambda self: None

    def monochromators(self):
        return _pynsx.Source_monochromators(self)

    def nMonochromators(self):
        return _pynsx.Source_nMonochromators(self)

    def setSelectedMonochromator(self, i):
        return _pynsx.Source_setSelectedMonochromator(self, i)

    def selectedMonochromator(self, *args):
        return _pynsx.Source_selectedMonochromator(self, *args)

    def addMonochromator(self, mono):
        return _pynsx.Source_addMonochromator(self, mono)
Source_swigregister = _pynsx.Source_swigregister
Source_swigregister(Source)

def Source_create(node):
    return _pynsx.Source_create(node)
Source_create = _pynsx.Source_create

class AABB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AABB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AABB, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_AABB(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_AABB
    __del__ = lambda self: None

    def translate(self, t):
        return _pynsx.AABB_translate(self, t)

    def isInside(self, vector):
        return _pynsx.AABB_isInside(self, vector)

    def collide(self, *args):
        return _pynsx.AABB_collide(self, *args)

    def lower(self):
        return _pynsx.AABB_lower(self)

    def setLower(self, lower):
        return _pynsx.AABB_setLower(self, lower)

    def upper(self):
        return _pynsx.AABB_upper(self)

    def setUpper(self, upper):
        return _pynsx.AABB_setUpper(self, upper)

    def center(self):
        return _pynsx.AABB_center(self)

    def extents(self):
        return _pynsx.AABB_extents(self)

    def contains(self, other):
        return _pynsx.AABB_contains(self, other)

    def printSelf(self, os):
        return _pynsx.AABB_printSelf(self, os)
AABB_swigregister = _pynsx.AABB_swigregister
AABB_swigregister(AABB)

class Ellipsoid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ellipsoid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ellipsoid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Ellipsoid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_Ellipsoid
    __del__ = lambda self: None

    def collide(self, *args):
        return _pynsx.Ellipsoid_collide(self, *args)

    def collideSegment(self, a, b):
        return _pynsx.Ellipsoid_collideSegment(self, a, b)

    def collideFace(self, o, a, b, n):
        return _pynsx.Ellipsoid_collideFace(self, o, a, b, n)

    def isInside(self, point):
        return _pynsx.Ellipsoid_isInside(self, point)

    def rotate(self, U):
        return _pynsx.Ellipsoid_rotate(self, U)

    def scale(self, value):
        return _pynsx.Ellipsoid_scale(self, value)

    def translate(self, t):
        return _pynsx.Ellipsoid_translate(self, t)

    def volume(self):
        return _pynsx.Ellipsoid_volume(self)

    def homogeneousMatrix(self):
        return _pynsx.Ellipsoid_homogeneousMatrix(self)

    def homogeneousMatrixInverse(self):
        return _pynsx.Ellipsoid_homogeneousMatrixInverse(self)

    def radii(self):
        return _pynsx.Ellipsoid_radii(self)

    def center(self):
        return _pynsx.Ellipsoid_center(self)

    def metric(self):
        return _pynsx.Ellipsoid_metric(self)

    def inverseMetric(self):
        return _pynsx.Ellipsoid_inverseMetric(self)

    def intersectionCenter(self, n, p):
        return _pynsx.Ellipsoid_intersectionCenter(self, n, p)

    def aabb(self):
        return _pynsx.Ellipsoid_aabb(self)

    def toDetectorSpace(self, data):
        return _pynsx.Ellipsoid_toDetectorSpace(self, data)

    def r2(self, x):
        return _pynsx.Ellipsoid_r2(self, x)
Ellipsoid_swigregister = _pynsx.Ellipsoid_swigregister
Ellipsoid_swigregister(Ellipsoid)

class Blob3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Blob3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Blob3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Blob3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addPoint(self, x, y, z, m):
        return _pynsx.Blob3D_addPoint(self, x, y, z, m)

    def merge(self, arg2):
        return _pynsx.Blob3D_merge(self, arg2)

    def mass(self):
        return _pynsx.Blob3D_mass(self)

    def nPixels(self):
        return _pynsx.Blob3D_nPixels(self)

    def center(self):
        return _pynsx.Blob3D_center(self)

    def toEllipsoid(self, scale, center, eigenvalues, eigenvectors):
        return _pynsx.Blob3D_toEllipsoid(self, scale, center, eigenvalues, eigenvectors)

    def printSelf(self, os):
        return _pynsx.Blob3D_printSelf(self, os)

    def covariance(self):
        return _pynsx.Blob3D_covariance(self)
    __swig_destroy__ = _pynsx.delete_Blob3D
    __del__ = lambda self: None
Blob3D_swigregister = _pynsx.Blob3D_swigregister
Blob3D_swigregister(Blob3D)

class Any(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Any, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Any, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Any(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_Any
    __del__ = lambda self: None

    def type(self):
        return _pynsx.Any_type(self)

    def setImmutability(self, immutability):
        return _pynsx.Any_setImmutability(self, immutability)
Any_swigregister = _pynsx.Any_swigregister
Any_swigregister(Any)

def Anyi(*args):
    val = _pynsx.new_Anyi(*args)
    return val

def Anyd(*args):
    val = _pynsx.new_Anyd(*args)
    return val

def Anyb(*args):
    val = _pynsx.new_Anyb(*args)
    return val

def Anys(*args):
    val = _pynsx.new_Anys(*args)
    return val

class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Material(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_Material
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.Material_clone(self)

    def formula(self):
        return _pynsx.Material_formula(self)

    def isotopes(self):
        return _pynsx.Material_isotopes(self)

    def massDensity(self):
        return _pynsx.Material_massDensity(self)

    def setMassDensity(self, massDensity):
        return _pynsx.Material_setMassDensity(self, massDensity)

    def molarMass(self):
        return _pynsx.Material_molarMass(self)

    def massFractions(self):
        return _pynsx.Material_massFractions(self)

    def atomicNumberDensity(self):
        return _pynsx.Material_atomicNumberDensity(self)

    def muIncoherent(self):
        return _pynsx.Material_muIncoherent(self)

    def muAbsorption(self, arg2=1.798e-10):
        return _pynsx.Material_muAbsorption(self, arg2)

    def _print(self, os):
        return _pynsx.Material__print(self, os)
Material_swigregister = _pynsx.Material_swigregister
Material_swigregister(Material)

class IsotopeDatabaseManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeDatabaseManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeDatabaseManager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PropertyTypes"] = _pynsx.IsotopeDatabaseManager_PropertyTypes_set
    __swig_getmethods__["PropertyTypes"] = _pynsx.IsotopeDatabaseManager_PropertyTypes_get
    if _newclass:
        PropertyTypes = _swig_property(_pynsx.IsotopeDatabaseManager_PropertyTypes_get, _pynsx.IsotopeDatabaseManager_PropertyTypes_set)

    def __init__(self):
        this = _pynsx.new_IsotopeDatabaseManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_IsotopeDatabaseManager
    __del__ = lambda self: None

    def isotopes(self):
        return _pynsx.IsotopeDatabaseManager_isotopes(self)

    def nIsotopes(self):
        return _pynsx.IsotopeDatabaseManager_nIsotopes(self)

    def hasProperty(self, isotope, property):
        return _pynsx.IsotopeDatabaseManager_hasProperty(self, isotope, property)

    def properties(self):
        return _pynsx.IsotopeDatabaseManager_properties(self)

    def propertyi(self, isotope, property):
        return _pynsx.IsotopeDatabaseManager_propertyi(self, isotope, property)

    def propertyd(self, isotope, property):
        return _pynsx.IsotopeDatabaseManager_propertyd(self, isotope, property)

    def propertys(self, isotope, property):
        return _pynsx.IsotopeDatabaseManager_propertys(self, isotope, property)

    def propertyb(self, isotope, property):
        return _pynsx.IsotopeDatabaseManager_propertyb(self, isotope, property)
IsotopeDatabaseManager_swigregister = _pynsx.IsotopeDatabaseManager_swigregister
IsotopeDatabaseManager_swigregister(IsotopeDatabaseManager)

class scored_uc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scored_uc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scored_uc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_scored_uc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _pynsx.scored_uc_first_set
    __swig_getmethods__["first"] = _pynsx.scored_uc_first_get
    if _newclass:
        first = _swig_property(_pynsx.scored_uc_first_get, _pynsx.scored_uc_first_set)
    __swig_setmethods__["second"] = _pynsx.scored_uc_second_set
    __swig_getmethods__["second"] = _pynsx.scored_uc_second_get
    if _newclass:
        second = _swig_property(_pynsx.scored_uc_second_get, _pynsx.scored_uc_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pynsx.delete_scored_uc
    __del__ = lambda self: None
scored_uc_swigregister = _pynsx.scored_uc_swigregister
scored_uc_swigregister(scored_uc)

class indexer_solutions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, indexer_solutions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, indexer_solutions, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.indexer_solutions_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.indexer_solutions___nonzero__(self)

    def __bool__(self):
        return _pynsx.indexer_solutions___bool__(self)

    def __len__(self):
        return _pynsx.indexer_solutions___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.indexer_solutions___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.indexer_solutions___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.indexer_solutions___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.indexer_solutions___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.indexer_solutions___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.indexer_solutions___setitem__(self, *args)

    def pop(self):
        return _pynsx.indexer_solutions_pop(self)

    def append(self, x):
        return _pynsx.indexer_solutions_append(self, x)

    def empty(self):
        return _pynsx.indexer_solutions_empty(self)

    def size(self):
        return _pynsx.indexer_solutions_size(self)

    def swap(self, v):
        return _pynsx.indexer_solutions_swap(self, v)

    def begin(self):
        return _pynsx.indexer_solutions_begin(self)

    def end(self):
        return _pynsx.indexer_solutions_end(self)

    def rbegin(self):
        return _pynsx.indexer_solutions_rbegin(self)

    def rend(self):
        return _pynsx.indexer_solutions_rend(self)

    def clear(self):
        return _pynsx.indexer_solutions_clear(self)

    def get_allocator(self):
        return _pynsx.indexer_solutions_get_allocator(self)

    def pop_back(self):
        return _pynsx.indexer_solutions_pop_back(self)

    def erase(self, *args):
        return _pynsx.indexer_solutions_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_indexer_solutions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.indexer_solutions_push_back(self, x)

    def front(self):
        return _pynsx.indexer_solutions_front(self)

    def back(self):
        return _pynsx.indexer_solutions_back(self)

    def assign(self, n, x):
        return _pynsx.indexer_solutions_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.indexer_solutions_resize(self, *args)

    def insert(self, *args):
        return _pynsx.indexer_solutions_insert(self, *args)

    def reserve(self, n):
        return _pynsx.indexer_solutions_reserve(self, n)

    def capacity(self):
        return _pynsx.indexer_solutions_capacity(self)
    __swig_destroy__ = _pynsx.delete_indexer_solutions
    __del__ = lambda self: None
indexer_solutions_swigregister = _pynsx.indexer_solutions_swigregister
indexer_solutions_swigregister(indexer_solutions)

class DetectorGonioFit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetectorGonioFit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetectorGonioFit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["success"] = _pynsx.DetectorGonioFit_success_set
    __swig_getmethods__["success"] = _pynsx.DetectorGonioFit_success_get
    if _newclass:
        success = _swig_property(_pynsx.DetectorGonioFit_success_get, _pynsx.DetectorGonioFit_success_set)
    __swig_setmethods__["offsets"] = _pynsx.DetectorGonioFit_offsets_set
    __swig_getmethods__["offsets"] = _pynsx.DetectorGonioFit_offsets_get
    if _newclass:
        offsets = _swig_property(_pynsx.DetectorGonioFit_offsets_get, _pynsx.DetectorGonioFit_offsets_set)
    __swig_setmethods__["cost_function"] = _pynsx.DetectorGonioFit_cost_function_set
    __swig_getmethods__["cost_function"] = _pynsx.DetectorGonioFit_cost_function_get
    if _newclass:
        cost_function = _swig_property(_pynsx.DetectorGonioFit_cost_function_get, _pynsx.DetectorGonioFit_cost_function_set)

    def __init__(self):
        this = _pynsx.new_DetectorGonioFit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_DetectorGonioFit
    __del__ = lambda self: None
DetectorGonioFit_swigregister = _pynsx.DetectorGonioFit_swigregister
DetectorGonioFit_swigregister(DetectorGonioFit)

class Detector(Component):
    __swig_setmethods__ = {}
    for _s in [Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Detector, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Detector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pynsx.Detector_create)
    else:
        create = _pynsx.Detector_create

    def clone(self):
        return _pynsx.Detector_clone(self)
    __swig_destroy__ = _pynsx.delete_Detector
    __del__ = lambda self: None

    def distance(self):
        return _pynsx.Detector_distance(self)

    def setDistance(self, d):
        return _pynsx.Detector_setDistance(self, d)

    def nCols(self):
        return _pynsx.Detector_nCols(self)

    def setNCols(self, cols):
        return _pynsx.Detector_setNCols(self, cols)

    def nRows(self):
        return _pynsx.Detector_nRows(self)

    def setNRows(self, rows):
        return _pynsx.Detector_setNRows(self, rows)

    def minRow(self):
        return _pynsx.Detector_minRow(self)

    def maxRow(self):
        return _pynsx.Detector_maxRow(self)

    def minCol(self):
        return _pynsx.Detector_minCol(self)

    def maxCol(self):
        return _pynsx.Detector_maxCol(self)

    def hasPixel(self, px, py):
        return _pynsx.Detector_hasPixel(self, px, py)

    def height(self):
        return _pynsx.Detector_height(self)

    def setHeight(self, height):
        return _pynsx.Detector_setHeight(self, height)

    def width(self):
        return _pynsx.Detector_width(self)

    def setWidth(self, width):
        return _pynsx.Detector_setWidth(self, width)

    def angularHeight(self):
        return _pynsx.Detector_angularHeight(self)

    def setAngularHeight(self, angle):
        return _pynsx.Detector_setAngularHeight(self, angle)

    def angularWidth(self):
        return _pynsx.Detector_angularWidth(self)

    def setAngularWidth(self, angle):
        return _pynsx.Detector_setAngularWidth(self, angle)

    def constructEvent(self, arg2, kf):
        return _pynsx.Detector_constructEvent(self, arg2, kf)

    def pixelPosition(self, x, y):
        return _pynsx.Detector_pixelPosition(self, x, y)

    def pixelHeight(self):
        return _pynsx.Detector_pixelHeight(self)

    def pixelWidth(self):
        return _pynsx.Detector_pixelWidth(self)

    def dataOrder(self):
        return _pynsx.Detector_dataOrder(self)

    def jacobian(self, x, y):
        return _pynsx.Detector_jacobian(self, x, y)

    def baseline(self):
        return _pynsx.Detector_baseline(self)

    def gain(self):
        return _pynsx.Detector_gain(self)

    def fitGonioOffsets(self, dataset, n_iterations=1000, tolerance=1.0e-6):
        return _pynsx.Detector_fitGonioOffsets(self, dataset, n_iterations, tolerance)
Detector_swigregister = _pynsx.Detector_swigregister
Detector_swigregister(Detector)

def Detector_create(node):
    return _pynsx.Detector_create(node)
Detector_create = _pynsx.Detector_create

class DetectorEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetectorEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetectorEvent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_DetectorEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["_px"] = _pynsx.DetectorEvent__px_set
    __swig_getmethods__["_px"] = _pynsx.DetectorEvent__px_get
    if _newclass:
        _px = _swig_property(_pynsx.DetectorEvent__px_get, _pynsx.DetectorEvent__px_set)
    __swig_setmethods__["_py"] = _pynsx.DetectorEvent__py_set
    __swig_getmethods__["_py"] = _pynsx.DetectorEvent__py_get
    if _newclass:
        _py = _swig_property(_pynsx.DetectorEvent__py_get, _pynsx.DetectorEvent__py_set)
    __swig_setmethods__["_frame"] = _pynsx.DetectorEvent__frame_set
    __swig_getmethods__["_frame"] = _pynsx.DetectorEvent__frame_get
    if _newclass:
        _frame = _swig_property(_pynsx.DetectorEvent__frame_get, _pynsx.DetectorEvent__frame_set)
    __swig_setmethods__["_tof"] = _pynsx.DetectorEvent__tof_set
    __swig_getmethods__["_tof"] = _pynsx.DetectorEvent__tof_get
    if _newclass:
        _tof = _swig_property(_pynsx.DetectorEvent__tof_get, _pynsx.DetectorEvent__tof_set)
    __swig_destroy__ = _pynsx.delete_DetectorEvent
    __del__ = lambda self: None
DetectorEvent_swigregister = _pynsx.DetectorEvent_swigregister
DetectorEvent_swigregister(DetectorEvent)

class DetectorEventQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetectorEventQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetectorEventQueue, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.DetectorEventQueue_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.DetectorEventQueue___nonzero__(self)

    def __bool__(self):
        return _pynsx.DetectorEventQueue___bool__(self)

    def __len__(self):
        return _pynsx.DetectorEventQueue___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.DetectorEventQueue___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.DetectorEventQueue___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.DetectorEventQueue___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.DetectorEventQueue___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.DetectorEventQueue___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.DetectorEventQueue___setitem__(self, *args)

    def pop(self):
        return _pynsx.DetectorEventQueue_pop(self)

    def append(self, x):
        return _pynsx.DetectorEventQueue_append(self, x)

    def empty(self):
        return _pynsx.DetectorEventQueue_empty(self)

    def size(self):
        return _pynsx.DetectorEventQueue_size(self)

    def swap(self, v):
        return _pynsx.DetectorEventQueue_swap(self, v)

    def begin(self):
        return _pynsx.DetectorEventQueue_begin(self)

    def end(self):
        return _pynsx.DetectorEventQueue_end(self)

    def rbegin(self):
        return _pynsx.DetectorEventQueue_rbegin(self)

    def rend(self):
        return _pynsx.DetectorEventQueue_rend(self)

    def clear(self):
        return _pynsx.DetectorEventQueue_clear(self)

    def get_allocator(self):
        return _pynsx.DetectorEventQueue_get_allocator(self)

    def pop_back(self):
        return _pynsx.DetectorEventQueue_pop_back(self)

    def erase(self, *args):
        return _pynsx.DetectorEventQueue_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_DetectorEventQueue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.DetectorEventQueue_push_back(self, x)

    def front(self):
        return _pynsx.DetectorEventQueue_front(self)

    def back(self):
        return _pynsx.DetectorEventQueue_back(self)

    def assign(self, n, x):
        return _pynsx.DetectorEventQueue_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.DetectorEventQueue_resize(self, *args)

    def insert(self, *args):
        return _pynsx.DetectorEventQueue_insert(self, *args)

    def pop_front(self):
        return _pynsx.DetectorEventQueue_pop_front(self)

    def push_front(self, x):
        return _pynsx.DetectorEventQueue_push_front(self, x)
    __swig_destroy__ = _pynsx.delete_DetectorEventQueue
    __del__ = lambda self: None
DetectorEventQueue_swigregister = _pynsx.DetectorEventQueue_swigregister
DetectorEventQueue_swigregister(DetectorEventQueue)

class DetectorEventList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetectorEventList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetectorEventList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.DetectorEventList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.DetectorEventList___nonzero__(self)

    def __bool__(self):
        return _pynsx.DetectorEventList___bool__(self)

    def __len__(self):
        return _pynsx.DetectorEventList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.DetectorEventList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.DetectorEventList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.DetectorEventList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.DetectorEventList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.DetectorEventList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.DetectorEventList___setitem__(self, *args)

    def pop(self):
        return _pynsx.DetectorEventList_pop(self)

    def append(self, x):
        return _pynsx.DetectorEventList_append(self, x)

    def empty(self):
        return _pynsx.DetectorEventList_empty(self)

    def size(self):
        return _pynsx.DetectorEventList_size(self)

    def swap(self, v):
        return _pynsx.DetectorEventList_swap(self, v)

    def begin(self):
        return _pynsx.DetectorEventList_begin(self)

    def end(self):
        return _pynsx.DetectorEventList_end(self)

    def rbegin(self):
        return _pynsx.DetectorEventList_rbegin(self)

    def rend(self):
        return _pynsx.DetectorEventList_rend(self)

    def clear(self):
        return _pynsx.DetectorEventList_clear(self)

    def get_allocator(self):
        return _pynsx.DetectorEventList_get_allocator(self)

    def pop_back(self):
        return _pynsx.DetectorEventList_pop_back(self)

    def erase(self, *args):
        return _pynsx.DetectorEventList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_DetectorEventList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.DetectorEventList_push_back(self, x)

    def front(self):
        return _pynsx.DetectorEventList_front(self)

    def back(self):
        return _pynsx.DetectorEventList_back(self)

    def assign(self, n, x):
        return _pynsx.DetectorEventList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.DetectorEventList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.DetectorEventList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.DetectorEventList_reserve(self, n)

    def capacity(self):
        return _pynsx.DetectorEventList_capacity(self)
    __swig_destroy__ = _pynsx.delete_DetectorEventList
    __del__ = lambda self: None
DetectorEventList_swigregister = _pynsx.DetectorEventList_swigregister
DetectorEventList_swigregister(DetectorEventList)

class DoubleQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleQueue, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.DoubleQueue_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.DoubleQueue___nonzero__(self)

    def __bool__(self):
        return _pynsx.DoubleQueue___bool__(self)

    def __len__(self):
        return _pynsx.DoubleQueue___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.DoubleQueue___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.DoubleQueue___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.DoubleQueue___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.DoubleQueue___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.DoubleQueue___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.DoubleQueue___setitem__(self, *args)

    def pop(self):
        return _pynsx.DoubleQueue_pop(self)

    def append(self, x):
        return _pynsx.DoubleQueue_append(self, x)

    def empty(self):
        return _pynsx.DoubleQueue_empty(self)

    def size(self):
        return _pynsx.DoubleQueue_size(self)

    def swap(self, v):
        return _pynsx.DoubleQueue_swap(self, v)

    def begin(self):
        return _pynsx.DoubleQueue_begin(self)

    def end(self):
        return _pynsx.DoubleQueue_end(self)

    def rbegin(self):
        return _pynsx.DoubleQueue_rbegin(self)

    def rend(self):
        return _pynsx.DoubleQueue_rend(self)

    def clear(self):
        return _pynsx.DoubleQueue_clear(self)

    def get_allocator(self):
        return _pynsx.DoubleQueue_get_allocator(self)

    def pop_back(self):
        return _pynsx.DoubleQueue_pop_back(self)

    def erase(self, *args):
        return _pynsx.DoubleQueue_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_DoubleQueue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.DoubleQueue_push_back(self, x)

    def front(self):
        return _pynsx.DoubleQueue_front(self)

    def back(self):
        return _pynsx.DoubleQueue_back(self)

    def assign(self, n, x):
        return _pynsx.DoubleQueue_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.DoubleQueue_resize(self, *args)

    def insert(self, *args):
        return _pynsx.DoubleQueue_insert(self, *args)

    def pop_front(self):
        return _pynsx.DoubleQueue_pop_front(self)

    def push_front(self, x):
        return _pynsx.DoubleQueue_push_front(self, x)
    __swig_destroy__ = _pynsx.delete_DoubleQueue
    __del__ = lambda self: None
DoubleQueue_swigregister = _pynsx.DoubleQueue_swigregister
DoubleQueue_swigregister(DoubleQueue)

class CylindricalDetector(Detector):
    __swig_setmethods__ = {}
    for _s in [Detector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CylindricalDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [Detector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CylindricalDetector, name)
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pynsx.CylindricalDetector_create)
    else:
        create = _pynsx.CylindricalDetector_create

    def __init__(self, *args):
        this = _pynsx.new_CylindricalDetector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _pynsx.CylindricalDetector_clone(self)
    __swig_destroy__ = _pynsx.delete_CylindricalDetector
    __del__ = lambda self: None

    def setHeight(self, height):
        return _pynsx.CylindricalDetector_setHeight(self, height)

    def setWidth(self, width):
        return _pynsx.CylindricalDetector_setWidth(self, width)

    def setAngularHeight(self, angle):
        return _pynsx.CylindricalDetector_setAngularHeight(self, angle)

    def setAngularWidth(self, angle):
        return _pynsx.CylindricalDetector_setAngularWidth(self, angle)

    def pixelPosition(self, px, py):
        return _pynsx.CylindricalDetector_pixelPosition(self, px, py)

    def constructEvent(self, arg2, kf):
        return _pynsx.CylindricalDetector_constructEvent(self, arg2, kf)

    def jacobian(self, px, py):
        return _pynsx.CylindricalDetector_jacobian(self, px, py)
CylindricalDetector_swigregister = _pynsx.CylindricalDetector_swigregister
CylindricalDetector_swigregister(CylindricalDetector)

def CylindricalDetector_create(node):
    return _pynsx.CylindricalDetector_create(node)
CylindricalDetector_create = _pynsx.CylindricalDetector_create

class FlatDetector(Detector):
    __swig_setmethods__ = {}
    for _s in [Detector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlatDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [Detector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlatDetector, name)
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pynsx.FlatDetector_create)
    else:
        create = _pynsx.FlatDetector_create

    def __init__(self, *args):
        this = _pynsx.new_FlatDetector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _pynsx.FlatDetector_clone(self)
    __swig_destroy__ = _pynsx.delete_FlatDetector
    __del__ = lambda self: None

    def setHeight(self, height):
        return _pynsx.FlatDetector_setHeight(self, height)

    def setWidth(self, width):
        return _pynsx.FlatDetector_setWidth(self, width)

    def setAngularHeight(self, angle):
        return _pynsx.FlatDetector_setAngularHeight(self, angle)

    def setAngularWidth(self, angle):
        return _pynsx.FlatDetector_setAngularWidth(self, angle)

    def pixelPosition(self, px, py):
        return _pynsx.FlatDetector_pixelPosition(self, px, py)

    def constructEvent(self, arg2, kf):
        return _pynsx.FlatDetector_constructEvent(self, arg2, kf)

    def jacobian(self, x, y):
        return _pynsx.FlatDetector_jacobian(self, x, y)
FlatDetector_swigregister = _pynsx.FlatDetector_swigregister
FlatDetector_swigregister(FlatDetector)

def FlatDetector_create(node):
    return _pynsx.FlatDetector_create(node)
FlatDetector_create = _pynsx.FlatDetector_create

class Diffractometer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Diffractometer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Diffractometer, name)
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pynsx.Diffractometer_create)
    else:
        create = _pynsx.Diffractometer_create

    def __init__(self, *args):
        this = _pynsx.new_Diffractometer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _pynsx.Diffractometer_clone(self)
    __swig_destroy__ = _pynsx.delete_Diffractometer
    __del__ = lambda self: None

    def name(self):
        return _pynsx.Diffractometer_name(self)

    def setName(self, name):
        return _pynsx.Diffractometer_setName(self, name)

    def detector(self, *args):
        return _pynsx.Diffractometer_detector(self, *args)

    def sample(self, *args):
        return _pynsx.Diffractometer_sample(self, *args)

    def setSample(self, sample):
        return _pynsx.Diffractometer_setSample(self, sample)

    def source(self, *args):
        return _pynsx.Diffractometer_source(self, *args)

    def setSource(self, source):
        return _pynsx.Diffractometer_setSource(self, source)
Diffractometer_swigregister = _pynsx.Diffractometer_swigregister
Diffractometer_swigregister(Diffractometer)

def Diffractometer_create(name):
    return _pynsx.Diffractometer_create(name)
Diffractometer_create = _pynsx.Diffractometer_create

class SampleGonioFit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SampleGonioFit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SampleGonioFit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["success"] = _pynsx.SampleGonioFit_success_set
    __swig_getmethods__["success"] = _pynsx.SampleGonioFit_success_get
    if _newclass:
        success = _swig_property(_pynsx.SampleGonioFit_success_get, _pynsx.SampleGonioFit_success_set)
    __swig_setmethods__["offsets"] = _pynsx.SampleGonioFit_offsets_set
    __swig_getmethods__["offsets"] = _pynsx.SampleGonioFit_offsets_get
    if _newclass:
        offsets = _swig_property(_pynsx.SampleGonioFit_offsets_get, _pynsx.SampleGonioFit_offsets_set)
    __swig_setmethods__["cost_function"] = _pynsx.SampleGonioFit_cost_function_set
    __swig_getmethods__["cost_function"] = _pynsx.SampleGonioFit_cost_function_get
    if _newclass:
        cost_function = _swig_property(_pynsx.SampleGonioFit_cost_function_get, _pynsx.SampleGonioFit_cost_function_set)

    def __init__(self):
        this = _pynsx.new_SampleGonioFit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_SampleGonioFit
    __del__ = lambda self: None
SampleGonioFit_swigregister = _pynsx.SampleGonioFit_swigregister
SampleGonioFit_swigregister(SampleGonioFit)

class Sample(Component):
    __swig_setmethods__ = {}
    for _s in [Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sample, name, value)
    __swig_getmethods__ = {}
    for _s in [Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sample, name)
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pynsx.Sample_create)
    else:
        create = _pynsx.Sample_create

    def __init__(self, *args):
        this = _pynsx.new_Sample(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _pynsx.Sample_clone(self)
    __swig_destroy__ = _pynsx.delete_Sample
    __del__ = lambda self: None

    def setShape(self, shape):
        return _pynsx.Sample_setShape(self, shape)

    def shape(self, *args):
        return _pynsx.Sample_shape(self, *args)

    def fitGonioOffsets(self, dataset, n_iterations=1000, tolerance=1.0e-6):
        return _pynsx.Sample_fitGonioOffsets(self, dataset, n_iterations, tolerance)
Sample_swigregister = _pynsx.Sample_swigregister
Sample_swigregister(Sample)

def Sample_create(node):
    return _pynsx.Sample_create(node)
Sample_create = _pynsx.Sample_create

class InstrumentState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentState, name)
    __repr__ = _swig_repr

    def __init__(self, diffractometer=None):
        this = _pynsx.new_InstrumentState(diffractometer)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_InstrumentState
    __del__ = lambda self: None

    def kfLab(self, detector_position):
        return _pynsx.InstrumentState_kfLab(self, detector_position)

    def ki(self):
        return _pynsx.InstrumentState_ki(self)

    def sampleQ(self, detector_position):
        return _pynsx.InstrumentState_sampleQ(self, detector_position)

    def gamma(self, detector_position):
        return _pynsx.InstrumentState_gamma(self, detector_position)

    def nu(self, detector_position):
        return _pynsx.InstrumentState_nu(self, detector_position)

    def twoTheta(self, detector_position):
        return _pynsx.InstrumentState_twoTheta(self, detector_position)

    def jacobianK(self, px, py):
        return _pynsx.InstrumentState_jacobianK(self, px, py)

    def diffractometer(self, *args):
        return _pynsx.InstrumentState_diffractometer(self, *args)
    __swig_setmethods__["detectorOrientation"] = _pynsx.InstrumentState_detectorOrientation_set
    __swig_getmethods__["detectorOrientation"] = _pynsx.InstrumentState_detectorOrientation_get
    if _newclass:
        detectorOrientation = _swig_property(_pynsx.InstrumentState_detectorOrientation_get, _pynsx.InstrumentState_detectorOrientation_set)

    def sampleOrientationMatrix(self):
        return _pynsx.InstrumentState_sampleOrientationMatrix(self)
    __swig_setmethods__["sampleOrientation"] = _pynsx.InstrumentState_sampleOrientation_set
    __swig_getmethods__["sampleOrientation"] = _pynsx.InstrumentState_sampleOrientation_get
    if _newclass:
        sampleOrientation = _swig_property(_pynsx.InstrumentState_sampleOrientation_get, _pynsx.InstrumentState_sampleOrientation_set)
    __swig_setmethods__["sampleOrientationOffset"] = _pynsx.InstrumentState_sampleOrientationOffset_set
    __swig_getmethods__["sampleOrientationOffset"] = _pynsx.InstrumentState_sampleOrientationOffset_get
    if _newclass:
        sampleOrientationOffset = _swig_property(_pynsx.InstrumentState_sampleOrientationOffset_get, _pynsx.InstrumentState_sampleOrientationOffset_set)
    __swig_setmethods__["samplePosition"] = _pynsx.InstrumentState_samplePosition_set
    __swig_getmethods__["samplePosition"] = _pynsx.InstrumentState_samplePosition_get
    if _newclass:
        samplePosition = _swig_property(_pynsx.InstrumentState_samplePosition_get, _pynsx.InstrumentState_samplePosition_set)
    __swig_setmethods__["detectorPositionOffset"] = _pynsx.InstrumentState_detectorPositionOffset_set
    __swig_getmethods__["detectorPositionOffset"] = _pynsx.InstrumentState_detectorPositionOffset_get
    if _newclass:
        detectorPositionOffset = _swig_property(_pynsx.InstrumentState_detectorPositionOffset_get, _pynsx.InstrumentState_detectorPositionOffset_set)
    __swig_setmethods__["ni"] = _pynsx.InstrumentState_ni_set
    __swig_getmethods__["ni"] = _pynsx.InstrumentState_ni_get
    if _newclass:
        ni = _swig_property(_pynsx.InstrumentState_ni_get, _pynsx.InstrumentState_ni_set)
    __swig_setmethods__["wavelength"] = _pynsx.InstrumentState_wavelength_set
    __swig_getmethods__["wavelength"] = _pynsx.InstrumentState_wavelength_get
    if _newclass:
        wavelength = _swig_property(_pynsx.InstrumentState_wavelength_get, _pynsx.InstrumentState_wavelength_set)
    __swig_setmethods__["refined"] = _pynsx.InstrumentState_refined_set
    __swig_getmethods__["refined"] = _pynsx.InstrumentState_refined_get
    if _newclass:
        refined = _swig_property(_pynsx.InstrumentState_refined_get, _pynsx.InstrumentState_refined_set)
InstrumentState_swigregister = _pynsx.InstrumentState_swigregister
InstrumentState_swigregister(InstrumentState)

class InterpolatedState(InstrumentState):
    __swig_setmethods__ = {}
    for _s in [InstrumentState]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpolatedState, name, value)
    __swig_getmethods__ = {}
    for _s in [InstrumentState]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterpolatedState, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_InterpolatedState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def jacobianQ(self, px, py):
        return _pynsx.InterpolatedState_jacobianQ(self, px, py)

    def lorentzFactor(self, px, py):
        return _pynsx.InterpolatedState_lorentzFactor(self, px, py)
    __swig_setmethods__["axis"] = _pynsx.InterpolatedState_axis_set
    __swig_getmethods__["axis"] = _pynsx.InterpolatedState_axis_get
    if _newclass:
        axis = _swig_property(_pynsx.InterpolatedState_axis_get, _pynsx.InterpolatedState_axis_set)
    __swig_setmethods__["stepSize"] = _pynsx.InterpolatedState_stepSize_set
    __swig_getmethods__["stepSize"] = _pynsx.InterpolatedState_stepSize_get
    if _newclass:
        stepSize = _swig_property(_pynsx.InterpolatedState_stepSize_get, _pynsx.InterpolatedState_stepSize_set)
    __swig_destroy__ = _pynsx.delete_InterpolatedState
    __del__ = lambda self: None
InterpolatedState_swigregister = _pynsx.InterpolatedState_swigregister
InterpolatedState_swigregister(InterpolatedState)

class FFTIndexing(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTIndexing, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FFTIndexing, name)
    __repr__ = _swig_repr

    def __init__(self, nSubdiv=25, amax=50.0):
        this = _pynsx.new_FFTIndexing(nSubdiv, amax)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def findOnSphere(self, qvects, n_vertices, nsolutions):
        return _pynsx.FFTIndexing_findOnSphere(self, qvects, n_vertices, nsolutions)
    __swig_destroy__ = _pynsx.delete_FFTIndexing
    __del__ = lambda self: None
FFTIndexing_swigregister = _pynsx.FFTIndexing_swigregister
FFTIndexing_swigregister(FFTIndexing)

class PeakData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeakData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeakData, name)
    __repr__ = _swig_repr

    def __init__(self, peak=0):
        this = _pynsx.new_PeakData(peak)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def events(self):
        return _pynsx.PeakData_events(self)

    def counts(self):
        return _pynsx.PeakData_counts(self)

    def computeStandard(self):
        return _pynsx.PeakData_computeStandard(self)

    def addEvent(self, ev, count):
        return _pynsx.PeakData_addEvent(self, ev, count)

    def reset(self):
        return _pynsx.PeakData_reset(self)
    __swig_destroy__ = _pynsx.delete_PeakData
    __del__ = lambda self: None
PeakData_swigregister = _pynsx.PeakData_swigregister
PeakData_swigregister(PeakData)

class IntegrationRegion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegrationRegion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegrationRegion, name)
    __repr__ = _swig_repr
    EventType_BACKGROUND = _pynsx.IntegrationRegion_EventType_BACKGROUND
    EventType_PEAK = _pynsx.IntegrationRegion_EventType_PEAK
    EventType_FORBIDDEN = _pynsx.IntegrationRegion_EventType_FORBIDDEN
    EventType_EXCLUDED = _pynsx.IntegrationRegion_EventType_EXCLUDED

    def __init__(self, *args):
        this = _pynsx.new_IntegrationRegion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def updateMask(self, mask, frame):
        return _pynsx.IntegrationRegion_updateMask(self, mask, frame)

    def aabb(self):
        return _pynsx.IntegrationRegion_aabb(self)

    def peakBB(self):
        return _pynsx.IntegrationRegion_peakBB(self)

    def classify(self, ev):
        return _pynsx.IntegrationRegion_classify(self, ev)

    def advanceFrame(self, image, mask, frame):
        return _pynsx.IntegrationRegion_advanceFrame(self, image, mask, frame)

    def reset(self):
        return _pynsx.IntegrationRegion_reset(self)

    def data(self, *args):
        return _pynsx.IntegrationRegion_data(self, *args)

    def shape(self):
        return _pynsx.IntegrationRegion_shape(self)

    def hull(self):
        return _pynsx.IntegrationRegion_hull(self)

    def peakEnd(self):
        return _pynsx.IntegrationRegion_peakEnd(self)
    __swig_destroy__ = _pynsx.delete_IntegrationRegion
    __del__ = lambda self: None
IntegrationRegion_swigregister = _pynsx.IntegrationRegion_swigregister
IntegrationRegion_swigregister(IntegrationRegion)

class Intensity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Intensity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Intensity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Intensity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self):
        return _pynsx.Intensity_value(self)

    def sigma(self):
        return _pynsx.Intensity_sigma(self)

    def variance(self):
        return _pynsx.Intensity_variance(self)

    def __add__(self, other):
        return _pynsx.Intensity___add__(self, other)

    def __sub__(self, other):
        return _pynsx.Intensity___sub__(self, other)

    def __mul__(self, scale):
        return _pynsx.Intensity___mul__(self, scale)

    def __iadd__(self, other):
        return _pynsx.Intensity___iadd__(self, other)

    def __imul__(self, s):
        return _pynsx.Intensity___imul__(self, s)

    def __truediv__(self, *args):
        return _pynsx.Intensity___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _pynsx.delete_Intensity
    __del__ = lambda self: None
Intensity_swigregister = _pynsx.Intensity_swigregister
Intensity_swigregister(Intensity)

class IntensityList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntensityList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntensityList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.IntensityList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.IntensityList___nonzero__(self)

    def __bool__(self):
        return _pynsx.IntensityList___bool__(self)

    def __len__(self):
        return _pynsx.IntensityList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.IntensityList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.IntensityList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.IntensityList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.IntensityList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.IntensityList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.IntensityList___setitem__(self, *args)

    def pop(self):
        return _pynsx.IntensityList_pop(self)

    def append(self, x):
        return _pynsx.IntensityList_append(self, x)

    def empty(self):
        return _pynsx.IntensityList_empty(self)

    def size(self):
        return _pynsx.IntensityList_size(self)

    def swap(self, v):
        return _pynsx.IntensityList_swap(self, v)

    def begin(self):
        return _pynsx.IntensityList_begin(self)

    def end(self):
        return _pynsx.IntensityList_end(self)

    def rbegin(self):
        return _pynsx.IntensityList_rbegin(self)

    def rend(self):
        return _pynsx.IntensityList_rend(self)

    def clear(self):
        return _pynsx.IntensityList_clear(self)

    def get_allocator(self):
        return _pynsx.IntensityList_get_allocator(self)

    def pop_back(self):
        return _pynsx.IntensityList_pop_back(self)

    def erase(self, *args):
        return _pynsx.IntensityList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_IntensityList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.IntensityList_push_back(self, x)

    def front(self):
        return _pynsx.IntensityList_front(self)

    def back(self):
        return _pynsx.IntensityList_back(self)

    def assign(self, n, x):
        return _pynsx.IntensityList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.IntensityList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.IntensityList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.IntensityList_reserve(self, n)

    def capacity(self):
        return _pynsx.IntensityList_capacity(self)
    __swig_destroy__ = _pynsx.delete_IntensityList
    __del__ = lambda self: None
IntensityList_swigregister = _pynsx.IntensityList_swigregister
IntensityList_swigregister(IntensityList)

class Profile3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Profile3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Profile3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Profile3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def at(self, i, j, k):
        return _pynsx.Profile3D_at(self, i, j, k)

    def __call__(self, *args):
        return _pynsx.Profile3D___call__(self, *args)

    def addValue(self, x, y):
        return _pynsx.Profile3D_addValue(self, x, y)

    def addSubdividedValue(self, x, y, subdivide):
        return _pynsx.Profile3D_addSubdividedValue(self, x, y, subdivide)

    def dx(self):
        return _pynsx.Profile3D_dx(self)

    def count(self):
        return _pynsx.Profile3D_count(self)

    def predict(self, x):
        return _pynsx.Profile3D_predict(self, x)

    def normalize(self):
        return _pynsx.Profile3D_normalize(self)

    def addProfile(self, other, weight):
        return _pynsx.Profile3D_addProfile(self, other, weight)

    def ellipsoid(self):
        return _pynsx.Profile3D_ellipsoid(self)

    def aabb(self):
        return _pynsx.Profile3D_aabb(self)

    def shape(self):
        return _pynsx.Profile3D_shape(self)
    __swig_destroy__ = _pynsx.delete_Profile3D
    __del__ = lambda self: None
Profile3D_swigregister = _pynsx.Profile3D_swigregister
Profile3D_swigregister(Profile3D)

class Profile1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Profile1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Profile1D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Profile1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addPoint(self, r2, M):
        return _pynsx.Profile1D_addPoint(self, r2, M)

    def counts(self):
        return _pynsx.Profile1D_counts(self)

    def npoints(self):
        return _pynsx.Profile1D_npoints(self)

    def profile(self):
        return _pynsx.Profile1D_profile(self)

    def reset(self):
        return _pynsx.Profile1D_reset(self)
    __swig_destroy__ = _pynsx.delete_Profile1D
    __del__ = lambda self: None
Profile1D_swigregister = _pynsx.Profile1D_swigregister
Profile1D_swigregister(Profile1D)

class IPeakIntegrator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPeakIntegrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPeakIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IPeakIntegrator:
            _self = None
        else:
            _self = self
        this = _pynsx.new_IPeakIntegrator(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_IPeakIntegrator
    __del__ = lambda self: None

    def compute(self, peak, region):
        return _pynsx.IPeakIntegrator_compute(self, peak, region)

    def integrate(self, peaks, data, peak_end, bkg_begin, bkg_end):
        return _pynsx.IPeakIntegrator_integrate(self, peaks, data, peak_end, bkg_begin, bkg_end)

    def meanBackground(self):
        return _pynsx.IPeakIntegrator_meanBackground(self)

    def integratedIntensity(self):
        return _pynsx.IPeakIntegrator_integratedIntensity(self)

    def rockingCurve(self):
        return _pynsx.IPeakIntegrator_rockingCurve(self)

    def setHandler(self, handler):
        return _pynsx.IPeakIntegrator_setHandler(self, handler)
    def __disown__(self):
        self.this.disown()
        _pynsx.disown_IPeakIntegrator(self)
        return weakref_proxy(self)
IPeakIntegrator_swigregister = _pynsx.IPeakIntegrator_swigregister
IPeakIntegrator_swigregister(IPeakIntegrator)

class MeanBackgroundIntegrator(IPeakIntegrator):
    __swig_setmethods__ = {}
    for _s in [IPeakIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeanBackgroundIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [IPeakIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeanBackgroundIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == MeanBackgroundIntegrator:
            _self = None
        else:
            _self = self
        this = _pynsx.new_MeanBackgroundIntegrator(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self, peak, region):
        return _pynsx.MeanBackgroundIntegrator_compute(self, peak, region)
    __swig_destroy__ = _pynsx.delete_MeanBackgroundIntegrator
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _pynsx.disown_MeanBackgroundIntegrator(self)
        return weakref_proxy(self)
MeanBackgroundIntegrator_swigregister = _pynsx.MeanBackgroundIntegrator_swigregister
MeanBackgroundIntegrator_swigregister(MeanBackgroundIntegrator)

class Profile3DIntegrator(IPeakIntegrator):
    __swig_setmethods__ = {}
    for _s in [IPeakIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Profile3DIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [IPeakIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Profile3DIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, library, radius, nframes, detector_space):
        if self.__class__ == Profile3DIntegrator:
            _self = None
        else:
            _self = self
        this = _pynsx.new_Profile3DIntegrator(_self, library, radius, nframes, detector_space)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self, peak, region):
        return _pynsx.Profile3DIntegrator_compute(self, peak, region)
    __swig_destroy__ = _pynsx.delete_Profile3DIntegrator
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _pynsx.disown_Profile3DIntegrator(self)
        return weakref_proxy(self)
Profile3DIntegrator_swigregister = _pynsx.Profile3DIntegrator_swigregister
Profile3DIntegrator_swigregister(Profile3DIntegrator)

class ISigmaIntegrator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISigmaIntegrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISigmaIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, library, radius, nframes):
        this = _pynsx.new_ISigmaIntegrator(library, radius, nframes)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self, peak, region):
        return _pynsx.ISigmaIntegrator_compute(self, peak, region)
    __swig_destroy__ = _pynsx.delete_ISigmaIntegrator
    __del__ = lambda self: None
ISigmaIntegrator_swigregister = _pynsx.ISigmaIntegrator_swigregister
ISigmaIntegrator_swigregister(ISigmaIntegrator)

class PixelSumIntegrator(MeanBackgroundIntegrator):
    __swig_setmethods__ = {}
    for _s in [MeanBackgroundIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelSumIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MeanBackgroundIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PixelSumIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, fit_center, fit_covariance):
        if self.__class__ == PixelSumIntegrator:
            _self = None
        else:
            _self = self
        this = _pynsx.new_PixelSumIntegrator(_self, fit_center, fit_covariance)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_PixelSumIntegrator
    __del__ = lambda self: None

    def compute(self, peak, region):
        return _pynsx.PixelSumIntegrator_compute(self, peak, region)
    def __disown__(self):
        self.this.disown()
        _pynsx.disown_PixelSumIntegrator(self)
        return weakref_proxy(self)
PixelSumIntegrator_swigregister = _pynsx.PixelSumIntegrator_swigregister
PixelSumIntegrator_swigregister(PixelSumIntegrator)

class Peak(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Peak, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Peak, name)
    __repr__ = _swig_repr
    Status_Selected = _pynsx.Peak_Status_Selected
    Status_Unselected = _pynsx.Peak_Status_Unselected
    Status_OutOfBounds = _pynsx.Peak_Status_OutOfBounds
    Status_NotIndexed = _pynsx.Peak_Status_NotIndexed
    Status_BadlyIntegrated = _pynsx.Peak_Status_BadlyIntegrated
    Status_BadlyPredicted = _pynsx.Peak_Status_BadlyPredicted
    Status_Unknown = _pynsx.Peak_Status_Unknown

    def __init__(self, *args):
        this = _pynsx.new_Peak(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setShape(self, peak):
        return _pynsx.Peak_setShape(self, peak)

    def rockingCurve(self):
        return _pynsx.Peak_rockingCurve(self)

    def qShape(self):
        return _pynsx.Peak_qShape(self)

    def shape(self):
        return _pynsx.Peak_shape(self)

    def correctedIntensity(self):
        return _pynsx.Peak_correctedIntensity(self)

    def rawIntensity(self):
        return _pynsx.Peak_rawIntensity(self)

    def meanBackground(self):
        return _pynsx.Peak_meanBackground(self)

    def peakEnd(self):
        return _pynsx.Peak_peakEnd(self)

    def bkgBegin(self):
        return _pynsx.Peak_bkgBegin(self)

    def bkgEnd(self):
        return _pynsx.Peak_bkgEnd(self)

    def scale(self):
        return _pynsx.Peak_scale(self)

    def setScale(self, factor):
        return _pynsx.Peak_setScale(self, factor)

    def status(self):
        return _pynsx.Peak_status(self)

    def setStatus(self, status):
        return _pynsx.Peak_setStatus(self, status)

    def selected(self):
        return _pynsx.Peak_selected(self)

    def masked(self):
        return _pynsx.Peak_masked(self)

    def enabled(self):
        return _pynsx.Peak_enabled(self)

    def setTransmission(self, transmission):
        return _pynsx.Peak_setTransmission(self, transmission)

    def transmission(self):
        return _pynsx.Peak_transmission(self)

    def setUnitCell(self, uc):
        return _pynsx.Peak_setUnitCell(self, uc)

    def unitCell(self):
        return _pynsx.Peak_unitCell(self)

    def setPredicted(self, predicted):
        return _pynsx.Peak_setPredicted(self, predicted)

    def predicted(self):
        return _pynsx.Peak_predicted(self)

    def updateIntegration(self, integrator, peakEnd, bkgBegin, bkgEnd):
        return _pynsx.Peak_updateIntegration(self, integrator, peakEnd, bkgBegin, bkgEnd)

    def q(self):
        return _pynsx.Peak_q(self)

    def qPredicted(self):
        return _pynsx.Peak_qPredicted(self)

    def data(self):
        return _pynsx.Peak_data(self)

    def setRawIntensity(self, i):
        return _pynsx.Peak_setRawIntensity(self, i)

    def predictCenter(self, frame):
        return _pynsx.Peak_predictCenter(self, frame)

    def d(self):
        return _pynsx.Peak_d(self)
    __swig_destroy__ = _pynsx.delete_Peak
    __del__ = lambda self: None
Peak_swigregister = _pynsx.Peak_swigregister
Peak_swigregister(Peak)

PeakInterpolation_NoInterpolation = _pynsx.PeakInterpolation_NoInterpolation
PeakInterpolation_InverseDistance = _pynsx.PeakInterpolation_InverseDistance
PeakInterpolation_Intensity = _pynsx.PeakInterpolation_Intensity

def predictPeaks(library, data, arg3, dmin, dmax, radius, nframes, min_neighbors, interpolation):
    return _pynsx.predictPeaks(library, data, arg3, dmin, dmax, radius, nframes, min_neighbors, interpolation)
predictPeaks = _pynsx.predictPeaks
class ShapeLibrary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeLibrary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeLibrary, name)
    __repr__ = _swig_repr

    def __init__(self, detector_coords, peakScale, bkgBegin, bkgEnd):
        this = _pynsx.new_ShapeLibrary(detector_coords, peakScale, bkgBegin, bkgEnd)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def detectorCoords(self):
        return _pynsx.ShapeLibrary_detectorCoords(self)

    def addPeak(self, peak, profile, integrated_profile):
        return _pynsx.ShapeLibrary_addPeak(self, peak, profile, integrated_profile)

    def updateFit(self, num_iterations):
        return _pynsx.ShapeLibrary_updateFit(self, num_iterations)

    def predictCovariance(self, peak):
        return _pynsx.ShapeLibrary_predictCovariance(self, peak)

    def meanPearson(self):
        return _pynsx.ShapeLibrary_meanPearson(self)

    def meanProfile(self, ev, radius, nframes):
        return _pynsx.ShapeLibrary_meanProfile(self, ev, radius, nframes)

    def meanProfile1D(self, ev, radius, nframes):
        return _pynsx.ShapeLibrary_meanProfile1D(self, ev, radius, nframes)

    def meanCovariance(self, reference_peak, radius, nframes, min_neighbors, interpolation):
        return _pynsx.ShapeLibrary_meanCovariance(self, reference_peak, radius, nframes, min_neighbors, interpolation)

    def findNeighbors(self, ev, radius, nframes):
        return _pynsx.ShapeLibrary_findNeighbors(self, ev, radius, nframes)

    def peakScale(self):
        return _pynsx.ShapeLibrary_peakScale(self)

    def bkgBegin(self):
        return _pynsx.ShapeLibrary_bkgBegin(self)

    def bkgEnd(self):
        return _pynsx.ShapeLibrary_bkgEnd(self)
    __swig_destroy__ = _pynsx.delete_ShapeLibrary
    __del__ = lambda self: None
ShapeLibrary_swigregister = _pynsx.ShapeLibrary_swigregister
ShapeLibrary_swigregister(ShapeLibrary)

class ShapeIntegrator(PixelSumIntegrator):
    __swig_setmethods__ = {}
    for _s in [PixelSumIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [PixelSumIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, lib, aabb, nx, ny, nz):
        if self.__class__ == ShapeIntegrator:
            _self = None
        else:
            _self = self
        this = _pynsx.new_ShapeIntegrator(_self, lib, aabb, nx, ny, nz)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compute(self, peak, region):
        return _pynsx.ShapeIntegrator_compute(self, peak, region)

    def library(self):
        return _pynsx.ShapeIntegrator_library(self)
    __swig_destroy__ = _pynsx.delete_ShapeIntegrator
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _pynsx.disown_ShapeIntegrator(self)
        return weakref_proxy(self)
ShapeIntegrator_swigregister = _pynsx.ShapeIntegrator_swigregister
ShapeIntegrator_swigregister(ShapeIntegrator)

class PeakList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeakList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeakList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.PeakList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.PeakList___nonzero__(self)

    def __bool__(self):
        return _pynsx.PeakList___bool__(self)

    def __len__(self):
        return _pynsx.PeakList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.PeakList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.PeakList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.PeakList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.PeakList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.PeakList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.PeakList___setitem__(self, *args)

    def pop(self):
        return _pynsx.PeakList_pop(self)

    def append(self, x):
        return _pynsx.PeakList_append(self, x)

    def empty(self):
        return _pynsx.PeakList_empty(self)

    def size(self):
        return _pynsx.PeakList_size(self)

    def swap(self, v):
        return _pynsx.PeakList_swap(self, v)

    def begin(self):
        return _pynsx.PeakList_begin(self)

    def end(self):
        return _pynsx.PeakList_end(self)

    def rbegin(self):
        return _pynsx.PeakList_rbegin(self)

    def rend(self):
        return _pynsx.PeakList_rend(self)

    def clear(self):
        return _pynsx.PeakList_clear(self)

    def get_allocator(self):
        return _pynsx.PeakList_get_allocator(self)

    def pop_back(self):
        return _pynsx.PeakList_pop_back(self)

    def erase(self, *args):
        return _pynsx.PeakList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_PeakList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.PeakList_push_back(self, x)

    def front(self):
        return _pynsx.PeakList_front(self)

    def back(self):
        return _pynsx.PeakList_back(self)

    def assign(self, n, x):
        return _pynsx.PeakList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.PeakList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.PeakList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.PeakList_reserve(self, n)

    def capacity(self):
        return _pynsx.PeakList_capacity(self)
    __swig_destroy__ = _pynsx.delete_PeakList
    __del__ = lambda self: None
PeakList_swigregister = _pynsx.PeakList_swigregister
PeakList_swigregister(PeakList)

class PeakShell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeakShell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeakShell, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.PeakShell_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.PeakShell___nonzero__(self)

    def __bool__(self):
        return _pynsx.PeakShell___bool__(self)

    def __len__(self):
        return _pynsx.PeakShell___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.PeakShell___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.PeakShell___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.PeakShell___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.PeakShell___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.PeakShell___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.PeakShell___setitem__(self, *args)

    def pop(self):
        return _pynsx.PeakShell_pop(self)

    def append(self, x):
        return _pynsx.PeakShell_append(self, x)

    def empty(self):
        return _pynsx.PeakShell_empty(self)

    def size(self):
        return _pynsx.PeakShell_size(self)

    def swap(self, v):
        return _pynsx.PeakShell_swap(self, v)

    def begin(self):
        return _pynsx.PeakShell_begin(self)

    def end(self):
        return _pynsx.PeakShell_end(self)

    def rbegin(self):
        return _pynsx.PeakShell_rbegin(self)

    def rend(self):
        return _pynsx.PeakShell_rend(self)

    def clear(self):
        return _pynsx.PeakShell_clear(self)

    def get_allocator(self):
        return _pynsx.PeakShell_get_allocator(self)

    def pop_back(self):
        return _pynsx.PeakShell_pop_back(self)

    def erase(self, *args):
        return _pynsx.PeakShell_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_PeakShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.PeakShell_push_back(self, x)

    def front(self):
        return _pynsx.PeakShell_front(self)

    def back(self):
        return _pynsx.PeakShell_back(self)

    def assign(self, n, x):
        return _pynsx.PeakShell_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.PeakShell_resize(self, *args)

    def insert(self, *args):
        return _pynsx.PeakShell_insert(self, *args)

    def reserve(self, n):
        return _pynsx.PeakShell_reserve(self, n)

    def capacity(self):
        return _pynsx.PeakShell_capacity(self)
    __swig_destroy__ = _pynsx.delete_PeakShell
    __del__ = lambda self: None
PeakShell_swigregister = _pynsx.PeakShell_swigregister
PeakShell_swigregister(PeakShell)

class PeakFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeakFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeakFilter, name)
    __repr__ = _swig_repr

    def complementary(self, peaks, other_peaks):
        return _pynsx.PeakFilter_complementary(self, peaks, other_peaks)

    def enabled(self, peaks, flag):
        return _pynsx.PeakFilter_enabled(self, peaks, flag)

    def selected(self, peaks, flag):
        return _pynsx.PeakFilter_selected(self, peaks, flag)

    def masked(self, peaks, flag):
        return _pynsx.PeakFilter_masked(self, peaks, flag)

    def indexed(self, *args):
        return _pynsx.PeakFilter_indexed(self, *args)

    def unitCell(self, peaks, unit_cell):
        return _pynsx.PeakFilter_unitCell(self, peaks, unit_cell)

    def hasUnitCell(self, peaks):
        return _pynsx.PeakFilter_hasUnitCell(self, peaks)

    def strength(self, peaks, min, max):
        return _pynsx.PeakFilter_strength(self, peaks, min, max)

    def predicted(self, peaks, flag):
        return _pynsx.PeakFilter_predicted(self, peaks, flag)

    def dRange(self, peaks, dmin, max):
        return _pynsx.PeakFilter_dRange(self, peaks, dmin, max)

    def mergedPeaksSignificance(self, peaks, significance_level):
        return _pynsx.PeakFilter_mergedPeaksSignificance(self, peaks, significance_level)

    def overlapping(self, peaks):
        return _pynsx.PeakFilter_overlapping(self, peaks)

    def extincted(self, peaks):
        return _pynsx.PeakFilter_extincted(self, peaks)

    def sparseDataSet(self, peaks, min_num_peaks):
        return _pynsx.PeakFilter_sparseDataSet(self, peaks, min_num_peaks)

    def __init__(self):
        this = _pynsx.new_PeakFilter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_PeakFilter
    __del__ = lambda self: None
PeakFilter_swigregister = _pynsx.PeakFilter_swigregister
PeakFilter_swigregister(PeakFilter)

class ConvolverParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvolverParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvolverParameters, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.ConvolverParameters_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.ConvolverParameters___nonzero__(self)

    def __bool__(self):
        return _pynsx.ConvolverParameters___bool__(self)

    def __len__(self):
        return _pynsx.ConvolverParameters___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _pynsx.ConvolverParameters___getitem__(self, key)

    def __delitem__(self, key):
        return _pynsx.ConvolverParameters___delitem__(self, key)

    def has_key(self, key):
        return _pynsx.ConvolverParameters_has_key(self, key)

    def keys(self):
        return _pynsx.ConvolverParameters_keys(self)

    def values(self):
        return _pynsx.ConvolverParameters_values(self)

    def items(self):
        return _pynsx.ConvolverParameters_items(self)

    def __contains__(self, key):
        return _pynsx.ConvolverParameters___contains__(self, key)

    def key_iterator(self):
        return _pynsx.ConvolverParameters_key_iterator(self)

    def value_iterator(self):
        return _pynsx.ConvolverParameters_value_iterator(self)

    def __setitem__(self, *args):
        return _pynsx.ConvolverParameters___setitem__(self, *args)

    def asdict(self):
        return _pynsx.ConvolverParameters_asdict(self)

    def __init__(self, *args):
        this = _pynsx.new_ConvolverParameters(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _pynsx.ConvolverParameters_empty(self)

    def size(self):
        return _pynsx.ConvolverParameters_size(self)

    def swap(self, v):
        return _pynsx.ConvolverParameters_swap(self, v)

    def begin(self):
        return _pynsx.ConvolverParameters_begin(self)

    def end(self):
        return _pynsx.ConvolverParameters_end(self)

    def rbegin(self):
        return _pynsx.ConvolverParameters_rbegin(self)

    def rend(self):
        return _pynsx.ConvolverParameters_rend(self)

    def clear(self):
        return _pynsx.ConvolverParameters_clear(self)

    def get_allocator(self):
        return _pynsx.ConvolverParameters_get_allocator(self)

    def count(self, x):
        return _pynsx.ConvolverParameters_count(self, x)

    def erase(self, *args):
        return _pynsx.ConvolverParameters_erase(self, *args)

    def find(self, x):
        return _pynsx.ConvolverParameters_find(self, x)

    def lower_bound(self, x):
        return _pynsx.ConvolverParameters_lower_bound(self, x)

    def upper_bound(self, x):
        return _pynsx.ConvolverParameters_upper_bound(self, x)
    __swig_destroy__ = _pynsx.delete_ConvolverParameters
    __del__ = lambda self: None
ConvolverParameters_swigregister = _pynsx.ConvolverParameters_swigregister
ConvolverParameters_swigregister(ConvolverParameters)

class IConvolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IConvolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IConvolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pynsx.delete_IConvolver
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.IConvolver_clone(self)

    def parameters(self):
        return _pynsx.IConvolver_parameters(self)

    def setParameters(self, parameters):
        return _pynsx.IConvolver_setParameters(self, parameters)

    def convolve(self, image):
        return _pynsx.IConvolver_convolve(self, image)

    def kernelSize(self):
        return _pynsx.IConvolver_kernelSize(self)

    def matrix(self):
        return _pynsx.IConvolver_matrix(self)

    def extendKernel(self, n_rows, n_cols):
        return _pynsx.IConvolver_extendKernel(self, n_rows, n_cols)
IConvolver_swigregister = _pynsx.IConvolver_swigregister
IConvolver_swigregister(IConvolver)

class ConvolverFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvolverFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvolverFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pynsx.new_ConvolverFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def create(self, convolver_type, parameters):
        return _pynsx.ConvolverFactory_create(self, convolver_type, parameters)

    def callbacks(self):
        return _pynsx.ConvolverFactory_callbacks(self)
    __swig_destroy__ = _pynsx.delete_ConvolverFactory
    __del__ = lambda self: None
ConvolverFactory_swigregister = _pynsx.ConvolverFactory_swigregister
ConvolverFactory_swigregister(ConvolverFactory)

class BoxConvolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxConvolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxConvolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_BoxConvolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_BoxConvolver
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.BoxConvolver_clone(self)

    def kernelSize(self):
        return _pynsx.BoxConvolver_kernelSize(self)

    def matrix(self):
        return _pynsx.BoxConvolver_matrix(self)
BoxConvolver_swigregister = _pynsx.BoxConvolver_swigregister
BoxConvolver_swigregister(BoxConvolver)

class DeltaConvolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeltaConvolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeltaConvolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_DeltaConvolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_DeltaConvolver
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.DeltaConvolver_clone(self)

    def kernelSize(self):
        return _pynsx.DeltaConvolver_kernelSize(self)

    def matrix(self):
        return _pynsx.DeltaConvolver_matrix(self)
DeltaConvolver_swigregister = _pynsx.DeltaConvolver_swigregister
DeltaConvolver_swigregister(DeltaConvolver)

class AnnularConvolver(IConvolver):
    __swig_setmethods__ = {}
    for _s in [IConvolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnularConvolver, name, value)
    __swig_getmethods__ = {}
    for _s in [IConvolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnnularConvolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_AnnularConvolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_AnnularConvolver
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.AnnularConvolver_clone(self)

    def kernelSize(self):
        return _pynsx.AnnularConvolver_kernelSize(self)

    def setParameters(self, parameters):
        return _pynsx.AnnularConvolver_setParameters(self, parameters)

    def convolve(self, image):
        return _pynsx.AnnularConvolver_convolve(self, image)

    def matrix(self):
        return _pynsx.AnnularConvolver_matrix(self)
AnnularConvolver_swigregister = _pynsx.AnnularConvolver_swigregister
AnnularConvolver_swigregister(AnnularConvolver)

class EnhancedAnnularConvolver(AnnularConvolver):
    __swig_setmethods__ = {}
    for _s in [AnnularConvolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnhancedAnnularConvolver, name, value)
    __swig_getmethods__ = {}
    for _s in [AnnularConvolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnhancedAnnularConvolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_EnhancedAnnularConvolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_EnhancedAnnularConvolver
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.EnhancedAnnularConvolver_clone(self)

    def convolve(self, image):
        return _pynsx.EnhancedAnnularConvolver_convolve(self, image)
EnhancedAnnularConvolver_swigregister = _pynsx.EnhancedAnnularConvolver_swigregister
EnhancedAnnularConvolver_swigregister(EnhancedAnnularConvolver)

class GaussianConvolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianConvolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianConvolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_GaussianConvolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_GaussianConvolver
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.GaussianConvolver_clone(self)

    def kernelSize(self):
        return _pynsx.GaussianConvolver_kernelSize(self)

    def matrix(self):
        return _pynsx.GaussianConvolver_matrix(self)
GaussianConvolver_swigregister = _pynsx.GaussianConvolver_swigregister
GaussianConvolver_swigregister(GaussianConvolver)

class RadialConvolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadialConvolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadialConvolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_RadialConvolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_RadialConvolver
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.RadialConvolver_clone(self)

    def kernelSize(self):
        return _pynsx.RadialConvolver_kernelSize(self)

    def matrix(self):
        return _pynsx.RadialConvolver_matrix(self)
RadialConvolver_swigregister = _pynsx.RadialConvolver_swigregister
RadialConvolver_swigregister(RadialConvolver)

class AtomicConvolver(IConvolver):
    __swig_setmethods__ = {}
    for _s in [IConvolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomicConvolver, name, value)
    __swig_getmethods__ = {}
    for _s in [IConvolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomicConvolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pynsx.delete_AtomicConvolver
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.AtomicConvolver_clone(self)

    def convolve(self, image):
        return _pynsx.AtomicConvolver_convolve(self, image)

    def kernelSize(self):
        return _pynsx.AtomicConvolver_kernelSize(self)
AtomicConvolver_swigregister = _pynsx.AtomicConvolver_swigregister
AtomicConvolver_swigregister(AtomicConvolver)

class Mosaic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mosaic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mosaic, name)
    __repr__ = _swig_repr

    def __init__(self, instr, l, dl, dMonSam, mu):
        this = _pynsx.new_Mosaic(instr, l, dl, dMonSam, mu)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, numors, n, overlap):
        return _pynsx.Mosaic_run(self, numors, n, overlap)

    def setSample(self, sample):
        return _pynsx.Mosaic_setSample(self, sample)

    def setMosaicity(self, mosaicity):
        return _pynsx.Mosaic_setMosaicity(self, mosaicity)
    __swig_destroy__ = _pynsx.delete_Mosaic
    __del__ = lambda self: None
Mosaic_swigregister = _pynsx.Mosaic_swigregister
Mosaic_swigregister(Mosaic)


def ellipsoids_overlap(ell1, ell2):
    return _pynsx.ellipsoids_overlap(ell1, ell2)
ellipsoids_overlap = _pynsx.ellipsoids_overlap
class MetaData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetaData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetaData, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pynsx.delete_MetaData
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pynsx.new_MetaData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def key(self, key):
        return _pynsx.MetaData_key(self, key)

    def isKey(self, *args):
        return _pynsx.MetaData_isKey(self, *args)

    def keys(self):
        return _pynsx.MetaData_keys(self)

    def map(self):
        return _pynsx.MetaData_map(self)
MetaData_swigregister = _pynsx.MetaData_swigregister
MetaData_swigregister(MetaData)

class IDataReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDataReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDataReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pynsx.delete_IDataReader
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.IDataReader_clone(self)

    def open(self):
        return _pynsx.IDataReader_open(self)

    def close(self):
        return _pynsx.IDataReader_close(self)

    def data(self, frame):
        return _pynsx.IDataReader_data(self, frame)

    def state(self, frame):
        return _pynsx.IDataReader_state(self, frame)

    def sampleStates(self):
        return _pynsx.IDataReader_sampleStates(self)

    def detectorStates(self):
        return _pynsx.IDataReader_detectorStates(self)

    def metadata(self, *args):
        return _pynsx.IDataReader_metadata(self, *args)

    def nFrames(self):
        return _pynsx.IDataReader_nFrames(self)

    def nCols(self):
        return _pynsx.IDataReader_nCols(self)

    def nRows(self):
        return _pynsx.IDataReader_nRows(self)

    def diffractometer(self, *args):
        return _pynsx.IDataReader_diffractometer(self, *args)

    def basename(self):
        return _pynsx.IDataReader_basename(self)

    def filename(self):
        return _pynsx.IDataReader_filename(self)

    def isOpened(self):
        return _pynsx.IDataReader_isOpened(self)
IDataReader_swigregister = _pynsx.IDataReader_swigregister
IDataReader_swigregister(IDataReader)

class ILLDataReader(IDataReader):
    __swig_setmethods__ = {}
    for _s in [IDataReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILLDataReader, name, value)
    __swig_getmethods__ = {}
    for _s in [IDataReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ILLDataReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_ILLDataReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_ILLDataReader
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.ILLDataReader_clone(self)

    def open(self):
        return _pynsx.ILLDataReader_open(self)

    def close(self):
        return _pynsx.ILLDataReader_close(self)

    def data(self, frame):
        return _pynsx.ILLDataReader_data(self, frame)
ILLDataReader_swigregister = _pynsx.ILLDataReader_swigregister
ILLDataReader_swigregister(ILLDataReader)

class HDF5MetaDataReader(IDataReader):
    __swig_setmethods__ = {}
    for _s in [IDataReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HDF5MetaDataReader, name, value)
    __swig_getmethods__ = {}
    for _s in [IDataReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HDF5MetaDataReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pynsx.delete_HDF5MetaDataReader
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.HDF5MetaDataReader_clone(self)

    def open(self):
        return _pynsx.HDF5MetaDataReader_open(self)

    def close(self):
        return _pynsx.HDF5MetaDataReader_close(self)
HDF5MetaDataReader_swigregister = _pynsx.HDF5MetaDataReader_swigregister
HDF5MetaDataReader_swigregister(HDF5MetaDataReader)

class HDF5DataReader(HDF5MetaDataReader):
    __swig_setmethods__ = {}
    for _s in [HDF5MetaDataReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HDF5DataReader, name, value)
    __swig_getmethods__ = {}
    for _s in [HDF5MetaDataReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HDF5DataReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_HDF5DataReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_HDF5DataReader
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.HDF5DataReader_clone(self)

    def data(self, frame):
        return _pynsx.HDF5DataReader_data(self, frame)
HDF5DataReader_swigregister = _pynsx.HDF5DataReader_swigregister
HDF5DataReader_swigregister(HDF5DataReader)

class DataSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_DataSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_DataSet
    __del__ = lambda self: None

    def filename(self):
        return _pynsx.DataSet_filename(self)

    def nFrames(self):
        return _pynsx.DataSet_nFrames(self)

    def nRows(self):
        return _pynsx.DataSet_nRows(self)

    def nCols(self):
        return _pynsx.DataSet_nCols(self)

    def instrumentStates(self, *args):
        return _pynsx.DataSet_instrumentStates(self, *args)

    def interpolatedState(self, frame):
        return _pynsx.DataSet_interpolatedState(self, frame)

    def addMask(self, mask):
        return _pynsx.DataSet_addMask(self, mask)

    def removeMask(self, mask):
        return _pynsx.DataSet_removeMask(self, mask)

    def masks(self):
        return _pynsx.DataSet_masks(self)

    def dataAt(self, x=0, y=0, z=0):
        return _pynsx.DataSet_dataAt(self, x, y, z)

    def frame(self, idx):
        return _pynsx.DataSet_frame(self, idx)

    def transformedFrame(self, idx):
        return _pynsx.DataSet_transformedFrame(self, idx)

    def convolvedFrame(self, idx, convolver_type, parameters):
        return _pynsx.DataSet_convolvedFrame(self, idx, convolver_type, parameters)

    def open(self):
        return _pynsx.DataSet_open(self)

    def close(self):
        return _pynsx.DataSet_close(self)

    def isOpened(self):
        return _pynsx.DataSet_isOpened(self)

    def saveHDF5(self, filename):
        return _pynsx.DataSet_saveHDF5(self, filename)

    def events(self, sample_qs):
        return _pynsx.DataSet_events(self, sample_qs)

    def computeQ(self, ev):
        return _pynsx.DataSet_computeQ(self, ev)

    def reader(self, *args):
        return _pynsx.DataSet_reader(self, *args)
DataSet_swigregister = _pynsx.DataSet_swigregister
DataSet_swigregister(DataSet)

class MergedData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MergedData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MergedData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_MergedData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addPeak(self, peak):
        return _pynsx.MergedData_addPeak(self, peak)

    def peaks(self):
        return _pynsx.MergedData_peaks(self)

    def redundancy(self):
        return _pynsx.MergedData_redundancy(self)

    def totalSize(self):
        return _pynsx.MergedData_totalSize(self)

    def clear(self):
        return _pynsx.MergedData_clear(self)
    __swig_destroy__ = _pynsx.delete_MergedData
    __del__ = lambda self: None
MergedData_swigregister = _pynsx.MergedData_swigregister
MergedData_swigregister(MergedData)

class DataList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.DataList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.DataList___nonzero__(self)

    def __bool__(self):
        return _pynsx.DataList___bool__(self)

    def __len__(self):
        return _pynsx.DataList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.DataList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.DataList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.DataList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.DataList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.DataList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.DataList___setitem__(self, *args)

    def pop(self):
        return _pynsx.DataList_pop(self)

    def append(self, x):
        return _pynsx.DataList_append(self, x)

    def empty(self):
        return _pynsx.DataList_empty(self)

    def size(self):
        return _pynsx.DataList_size(self)

    def swap(self, v):
        return _pynsx.DataList_swap(self, v)

    def begin(self):
        return _pynsx.DataList_begin(self)

    def end(self):
        return _pynsx.DataList_end(self)

    def rbegin(self):
        return _pynsx.DataList_rbegin(self)

    def rend(self):
        return _pynsx.DataList_rend(self)

    def clear(self):
        return _pynsx.DataList_clear(self)

    def get_allocator(self):
        return _pynsx.DataList_get_allocator(self)

    def pop_back(self):
        return _pynsx.DataList_pop_back(self)

    def erase(self, *args):
        return _pynsx.DataList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_DataList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.DataList_push_back(self, x)

    def front(self):
        return _pynsx.DataList_front(self)

    def back(self):
        return _pynsx.DataList_back(self)

    def assign(self, n, x):
        return _pynsx.DataList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.DataList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.DataList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.DataList_reserve(self, n)

    def capacity(self):
        return _pynsx.DataList_capacity(self)
    __swig_destroy__ = _pynsx.delete_DataList
    __del__ = lambda self: None
DataList_swigregister = _pynsx.DataList_swigregister
DataList_swigregister(DataList)

class ITask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITask, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Status_SUBMITTED = _pynsx.ITask_Status_SUBMITTED
    Status_STARTED = _pynsx.ITask_Status_STARTED
    Status_ABORTED = _pynsx.ITask_Status_ABORTED
    Status_COMPLETED = _pynsx.ITask_Status_COMPLETED
    __swig_destroy__ = _pynsx.delete_ITask
    __del__ = lambda self: None

    def state(self):
        return _pynsx.ITask_state(self)

    def sendState(self):
        return _pynsx.ITask_sendState(self)

    def abort(self):
        return _pynsx.ITask_abort(self)

    def run(self):
        return _pynsx.ITask_run(self)

    def doTask(self):
        return _pynsx.ITask_doTask(self)

    def setCallBack(self, callback):
        return _pynsx.ITask_setCallBack(self, callback)
ITask_swigregister = _pynsx.ITask_swigregister
ITask_swigregister(ITask)

class TaskState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaskState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TaskState, name)
    __repr__ = _swig_repr
    Section_NAME = _pynsx.TaskState_Section_NAME
    Section_PROGRESS = _pynsx.TaskState_Section_PROGRESS
    Section_START = _pynsx.TaskState_Section_START
    Section_ABORT = _pynsx.TaskState_Section_ABORT
    Section_REMOVE = _pynsx.TaskState_Section_REMOVE
    Section_COUNT = _pynsx.TaskState_Section_COUNT
    __swig_setmethods__["name"] = _pynsx.TaskState_name_set
    __swig_getmethods__["name"] = _pynsx.TaskState_name_get
    if _newclass:
        name = _swig_property(_pynsx.TaskState_name_get, _pynsx.TaskState_name_set)
    __swig_setmethods__["type"] = _pynsx.TaskState_type_set
    __swig_getmethods__["type"] = _pynsx.TaskState_type_get
    if _newclass:
        type = _swig_property(_pynsx.TaskState_type_get, _pynsx.TaskState_type_set)
    __swig_setmethods__["current_step"] = _pynsx.TaskState_current_step_set
    __swig_getmethods__["current_step"] = _pynsx.TaskState_current_step_get
    if _newclass:
        current_step = _swig_property(_pynsx.TaskState_current_step_get, _pynsx.TaskState_current_step_set)
    __swig_setmethods__["n_steps"] = _pynsx.TaskState_n_steps_set
    __swig_getmethods__["n_steps"] = _pynsx.TaskState_n_steps_get
    if _newclass:
        n_steps = _swig_property(_pynsx.TaskState_n_steps_get, _pynsx.TaskState_n_steps_set)
    __swig_setmethods__["status"] = _pynsx.TaskState_status_set
    __swig_getmethods__["status"] = _pynsx.TaskState_status_get
    if _newclass:
        status = _swig_property(_pynsx.TaskState_status_get, _pynsx.TaskState_status_set)
    __swig_setmethods__["info"] = _pynsx.TaskState_info_set
    __swig_getmethods__["info"] = _pynsx.TaskState_info_get
    if _newclass:
        info = _swig_property(_pynsx.TaskState_info_get, _pynsx.TaskState_info_set)

    def __init__(self):
        this = _pynsx.new_TaskState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_TaskState
    __del__ = lambda self: None
TaskState_swigregister = _pynsx.TaskState_swigregister
TaskState_swigregister(TaskState)

class PeakFinder(ITask):
    __swig_setmethods__ = {}
    for _s in [ITask]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeakFinder, name, value)
    __swig_getmethods__ = {}
    for _s in [ITask]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeakFinder, name)
    __repr__ = _swig_repr

    def __init__(self, datasets):
        this = _pynsx.new_PeakFinder(datasets)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def doTask(self):
        return _pynsx.PeakFinder_doTask(self)

    def setPeakMergingScale(self, scale):
        return _pynsx.PeakFinder_setPeakMergingScale(self, scale)

    def setMinSize(self, minComp):
        return _pynsx.PeakFinder_setMinSize(self, minComp)

    def minSize(self):
        return _pynsx.PeakFinder_minSize(self)

    def setMaxSize(self, maxComp):
        return _pynsx.PeakFinder_setMaxSize(self, maxComp)

    def maxSize(self):
        return _pynsx.PeakFinder_maxSize(self)

    def setMaxFrames(self, maxComp):
        return _pynsx.PeakFinder_setMaxFrames(self, maxComp)

    def maxFrames(self):
        return _pynsx.PeakFinder_maxFrames(self)

    def peaks(self):
        return _pynsx.PeakFinder_peaks(self)

    def setConvolver(self, convolver):
        return _pynsx.PeakFinder_setConvolver(self, convolver)

    def setThreshold(self, value):
        return _pynsx.PeakFinder_setThreshold(self, value)
    __swig_destroy__ = _pynsx.delete_PeakFinder
    __del__ = lambda self: None
PeakFinder_swigregister = _pynsx.PeakFinder_swigregister
PeakFinder_swigregister(PeakFinder)

class MergedPeakSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MergedPeakSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MergedPeakSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.MergedPeakSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.MergedPeakSet___nonzero__(self)

    def __bool__(self):
        return _pynsx.MergedPeakSet___bool__(self)

    def __len__(self):
        return _pynsx.MergedPeakSet___len__(self)

    def append(self, x):
        return _pynsx.MergedPeakSet_append(self, x)

    def __contains__(self, x):
        return _pynsx.MergedPeakSet___contains__(self, x)

    def __getitem__(self, i):
        return _pynsx.MergedPeakSet___getitem__(self, i)

    def add(self, x):
        return _pynsx.MergedPeakSet_add(self, x)

    def discard(self, x):
        return _pynsx.MergedPeakSet_discard(self, x)

    def __init__(self, *args):
        this = _pynsx.new_MergedPeakSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _pynsx.MergedPeakSet_empty(self)

    def size(self):
        return _pynsx.MergedPeakSet_size(self)

    def clear(self):
        return _pynsx.MergedPeakSet_clear(self)

    def swap(self, v):
        return _pynsx.MergedPeakSet_swap(self, v)

    def count(self, x):
        return _pynsx.MergedPeakSet_count(self, x)

    def begin(self):
        return _pynsx.MergedPeakSet_begin(self)

    def end(self):
        return _pynsx.MergedPeakSet_end(self)

    def rbegin(self):
        return _pynsx.MergedPeakSet_rbegin(self)

    def rend(self):
        return _pynsx.MergedPeakSet_rend(self)

    def erase(self, *args):
        return _pynsx.MergedPeakSet_erase(self, *args)

    def find(self, x):
        return _pynsx.MergedPeakSet_find(self, x)

    def lower_bound(self, x):
        return _pynsx.MergedPeakSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _pynsx.MergedPeakSet_upper_bound(self, x)

    def equal_range(self, x):
        return _pynsx.MergedPeakSet_equal_range(self, x)

    def insert(self, __x):
        return _pynsx.MergedPeakSet_insert(self, __x)
    __swig_destroy__ = _pynsx.delete_MergedPeakSet
    __del__ = lambda self: None
MergedPeakSet_swigregister = _pynsx.MergedPeakSet_swigregister
MergedPeakSet_swigregister(MergedPeakSet)

class FitParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitParameters, name)
    __repr__ = _swig_repr

    def addParameter(self, addr):
        return _pynsx.FitParameters_addParameter(self, addr)

    def setValues(self, v):
        return _pynsx.FitParameters_setValues(self, v)

    def writeValues(self, v):
        return _pynsx.FitParameters_writeValues(self, v)

    def nparams(self):
        return _pynsx.FitParameters_nparams(self)

    def nfree(self):
        return _pynsx.FitParameters_nfree(self)

    def setConstraint(self, C):
        return _pynsx.FitParameters_setConstraint(self, C)

    def resetConstraints(self):
        return _pynsx.FitParameters_resetConstraints(self)

    def kernel(self):
        return _pynsx.FitParameters_kernel(self)

    def setKernel(self, ker):
        return _pynsx.FitParameters_setKernel(self, ker)

    def reset(self):
        return _pynsx.FitParameters_reset(self)

    def __init__(self):
        this = _pynsx.new_FitParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_FitParameters
    __del__ = lambda self: None
FitParameters_swigregister = _pynsx.FitParameters_swigregister
FitParameters_swigregister(FitParameters)

class Minimizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Minimizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Minimizer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pynsx.new_Minimizer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_Minimizer
    __del__ = lambda self: None

    def initialize(self, params, values):
        return _pynsx.Minimizer_initialize(self, params, values)

    def getStatusStr(self):
        return _pynsx.Minimizer_getStatusStr(self)

    def fit(self, max_iter):
        return _pynsx.Minimizer_fit(self, max_iter)

    def covariance(self):
        return _pynsx.Minimizer_covariance(self)

    def setxTol(self, xtol):
        return _pynsx.Minimizer_setxTol(self, xtol)

    def setgTol(self, gtol):
        return _pynsx.Minimizer_setgTol(self, gtol)

    def setfTol(self, ftol):
        return _pynsx.Minimizer_setfTol(self, ftol)

    def jacobian(self):
        return _pynsx.Minimizer_jacobian(self)

    def setWeights(self, wt):
        return _pynsx.Minimizer_setWeights(self, wt)

    def meanSquaredError(self):
        return _pynsx.Minimizer_meanSquaredError(self)
Minimizer_swigregister = _pynsx.Minimizer_swigregister
Minimizer_swigregister(Minimizer)


def eigenToVector(ev):
    return _pynsx.eigenToVector(ev)
eigenToVector = _pynsx.eigenToVector
class CSV(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSV, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSV, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_CSV(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_CSV
    __del__ = lambda self: None

    def getRow(self, stream):
        return _pynsx.CSV_getRow(self, stream)
CSV_swigregister = _pynsx.CSV_swigregister
CSV_swigregister(CSV)

DataOrder_TopLeftColMajor = _pynsx.DataOrder_TopLeftColMajor
DataOrder_TopLeftRowMajor = _pynsx.DataOrder_TopLeftRowMajor
DataOrder_TopRightColMajor = _pynsx.DataOrder_TopRightColMajor
DataOrder_TopRightRowMajor = _pynsx.DataOrder_TopRightRowMajor
DataOrder_BottomLeftColMajor = _pynsx.DataOrder_BottomLeftColMajor
DataOrder_BottomLeftRowMajor = _pynsx.DataOrder_BottomLeftRowMajor
DataOrder_BottomRightColMajor = _pynsx.DataOrder_BottomRightColMajor
DataOrder_BottomRightRowMajor = _pynsx.DataOrder_BottomRightRowMajor

def doubleToFraction(number, nmax, nom, dnom):
    return _pynsx.doubleToFraction(number, nmax, nom, dnom)
doubleToFraction = _pynsx.doubleToFraction

def fileSeparator():
    return _pynsx.fileSeparator()
fileSeparator = _pynsx.fileSeparator

def fileBasename(input_path):
    return _pynsx.fileBasename(input_path)
fileBasename = _pynsx.fileBasename

def splitFileExtension(input_path):
    return _pynsx.splitFileExtension(input_path)
splitFileExtension = _pynsx.splitFileExtension

def fileDirname(input_path):
    return _pynsx.fileDirname(input_path)
fileDirname = _pynsx.fileDirname

def makeDirectory(path, mode=0x1C0):
    return _pynsx.makeDirectory(path, mode)
makeDirectory = _pynsx.makeDirectory

def buildPath(*args):
    return _pynsx.buildPath(*args)
buildPath = _pynsx.buildPath

def homeDirectory():
    return _pynsx.homeDirectory()
homeDirectory = _pynsx.homeDirectory

def applicationDataPath():
    return _pynsx.applicationDataPath()
applicationDataPath = _pynsx.applicationDataPath

def fileExists(filename):
    return _pynsx.fileExists(filename)
fileExists = _pynsx.fileExists

def diffractometersPath():
    return _pynsx.diffractometersPath()
diffractometersPath = _pynsx.diffractometersPath

def readIntsFromChar(begin, end, v):
    return _pynsx.readIntsFromChar(begin, end, v)
readIntsFromChar = _pynsx.readIntsFromChar

def readDoublesFromChar(begin, end, v):
    return _pynsx.readDoublesFromChar(begin, end, v)
readDoublesFromChar = _pynsx.readDoublesFromChar
class MatrixParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixParser, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pynsx.new_MatrixParser()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_MatrixParser
    __del__ = lambda self: None

    def __call__(self, *args):
        return _pynsx.MatrixParser___call__(self, *args)
MatrixParser_swigregister = _pynsx.MatrixParser_swigregister
MatrixParser_swigregister(MatrixParser)

class ProgressHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressHandler, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pynsx.new_ProgressHandler()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_ProgressHandler
    __del__ = lambda self: None

    def setCallback(self, callback):
        return _pynsx.ProgressHandler_setCallback(self, callback)

    def setProgress(self, progress):
        return _pynsx.ProgressHandler_setProgress(self, progress)

    def getProgress(self):
        return _pynsx.ProgressHandler_getProgress(self)

    def setStatus(self, status):
        return _pynsx.ProgressHandler_setStatus(self, status)

    def getStatus(self):
        return _pynsx.ProgressHandler_getStatus(self)

    def log(self, *args):
        return _pynsx.ProgressHandler_log(self, *args)

    def getLog(self):
        return _pynsx.ProgressHandler_getLog(self)

    def abort(self):
        return _pynsx.ProgressHandler_abort(self)

    def aborted(self):
        return _pynsx.ProgressHandler_aborted(self)
ProgressHandler_swigregister = _pynsx.ProgressHandler_swigregister
ProgressHandler_swigregister(ProgressHandler)

class PeakCoordinateSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeakCoordinateSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PeakCoordinateSystem, name)
    __repr__ = _swig_repr

    def __init__(self, peak):
        this = _pynsx.new_PeakCoordinateSystem(peak)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def transform(self, ev):
        return _pynsx.PeakCoordinateSystem_transform(self, ev)

    def jacobian(self):
        return _pynsx.PeakCoordinateSystem_jacobian(self)

    def estimateDivergence(self):
        return _pynsx.PeakCoordinateSystem_estimateDivergence(self)

    def estimateMosaicity(self):
        return _pynsx.PeakCoordinateSystem_estimateMosaicity(self)

    def detectorShape(self, sigmaD, sigmaM):
        return _pynsx.PeakCoordinateSystem_detectorShape(self, sigmaD, sigmaM)

    def standardShape(self):
        return _pynsx.PeakCoordinateSystem_standardShape(self)
    __swig_destroy__ = _pynsx.delete_PeakCoordinateSystem
    __del__ = lambda self: None
PeakCoordinateSystem_swigregister = _pynsx.PeakCoordinateSystem_swigregister
PeakCoordinateSystem_swigregister(PeakCoordinateSystem)

class RefinementBatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementBatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementBatch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_RefinementBatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def refineUB(self):
        return _pynsx.RefinementBatch_refineUB(self)

    def refineDetectorOffset(self):
        return _pynsx.RefinementBatch_refineDetectorOffset(self)

    def refineSamplePosition(self):
        return _pynsx.RefinementBatch_refineSamplePosition(self)

    def refineSampleOrientation(self):
        return _pynsx.RefinementBatch_refineSampleOrientation(self)

    def refineKi(self):
        return _pynsx.RefinementBatch_refineKi(self)

    def refine(self, max_iter=100):
        return _pynsx.RefinementBatch_refine(self, max_iter)

    def residuals(self, fvec):
        return _pynsx.RefinementBatch_residuals(self, fvec)

    def peaks(self):
        return _pynsx.RefinementBatch_peaks(self)

    def cell(self):
        return _pynsx.RefinementBatch_cell(self)

    def constraintKernel(self):
        return _pynsx.RefinementBatch_constraintKernel(self)

    def contains(self, f):
        return _pynsx.RefinementBatch_contains(self, f)

    def costFunction(self):
        return _pynsx.RefinementBatch_costFunction(self)
    __swig_destroy__ = _pynsx.delete_RefinementBatch
    __del__ = lambda self: None
RefinementBatch_swigregister = _pynsx.RefinementBatch_swigregister
RefinementBatch_swigregister(RefinementBatch)

class Refiner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Refiner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Refiner, name)
    __repr__ = _swig_repr

    def __init__(self, states, cell, peaks, nbatches):
        this = _pynsx.new_Refiner(states, cell, peaks, nbatches)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def refineUB(self):
        return _pynsx.Refiner_refineUB(self)

    def refineDetectorOffset(self):
        return _pynsx.Refiner_refineDetectorOffset(self)

    def refineSamplePosition(self):
        return _pynsx.Refiner_refineSamplePosition(self)

    def refineSampleOrientation(self):
        return _pynsx.Refiner_refineSampleOrientation(self)

    def refineKi(self):
        return _pynsx.Refiner_refineKi(self)

    def refine(self, max_iter=100):
        return _pynsx.Refiner_refine(self, max_iter)

    def updatePredictions(self, peaks):
        return _pynsx.Refiner_updatePredictions(self, peaks)

    def batches(self):
        return _pynsx.Refiner_batches(self)
    __swig_destroy__ = _pynsx.delete_Refiner
    __del__ = lambda self: None
Refiner_swigregister = _pynsx.Refiner_swigregister
Refiner_swigregister(Refiner)

class RefinementBatchList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementBatchList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementBatchList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.RefinementBatchList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.RefinementBatchList___nonzero__(self)

    def __bool__(self):
        return _pynsx.RefinementBatchList___bool__(self)

    def __len__(self):
        return _pynsx.RefinementBatchList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.RefinementBatchList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.RefinementBatchList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.RefinementBatchList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.RefinementBatchList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.RefinementBatchList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.RefinementBatchList___setitem__(self, *args)

    def pop(self):
        return _pynsx.RefinementBatchList_pop(self)

    def append(self, x):
        return _pynsx.RefinementBatchList_append(self, x)

    def empty(self):
        return _pynsx.RefinementBatchList_empty(self)

    def size(self):
        return _pynsx.RefinementBatchList_size(self)

    def swap(self, v):
        return _pynsx.RefinementBatchList_swap(self, v)

    def begin(self):
        return _pynsx.RefinementBatchList_begin(self)

    def end(self):
        return _pynsx.RefinementBatchList_end(self)

    def rbegin(self):
        return _pynsx.RefinementBatchList_rbegin(self)

    def rend(self):
        return _pynsx.RefinementBatchList_rend(self)

    def clear(self):
        return _pynsx.RefinementBatchList_clear(self)

    def get_allocator(self):
        return _pynsx.RefinementBatchList_get_allocator(self)

    def pop_back(self):
        return _pynsx.RefinementBatchList_pop_back(self)

    def erase(self, *args):
        return _pynsx.RefinementBatchList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_RefinementBatchList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.RefinementBatchList_push_back(self, x)

    def front(self):
        return _pynsx.RefinementBatchList_front(self)

    def back(self):
        return _pynsx.RefinementBatchList_back(self)

    def assign(self, n, x):
        return _pynsx.RefinementBatchList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.RefinementBatchList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.RefinementBatchList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.RefinementBatchList_reserve(self, n)

    def capacity(self):
        return _pynsx.RefinementBatchList_capacity(self)
    __swig_destroy__ = _pynsx.delete_RefinementBatchList
    __del__ = lambda self: None
RefinementBatchList_swigregister = _pynsx.RefinementBatchList_swigregister
RefinementBatchList_swigregister(RefinementBatchList)

class UnitCellCharacter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitCellCharacter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitCellCharacter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["g00"] = _pynsx.UnitCellCharacter_g00_set
    __swig_getmethods__["g00"] = _pynsx.UnitCellCharacter_g00_get
    if _newclass:
        g00 = _swig_property(_pynsx.UnitCellCharacter_g00_get, _pynsx.UnitCellCharacter_g00_set)
    __swig_setmethods__["g01"] = _pynsx.UnitCellCharacter_g01_set
    __swig_getmethods__["g01"] = _pynsx.UnitCellCharacter_g01_get
    if _newclass:
        g01 = _swig_property(_pynsx.UnitCellCharacter_g01_get, _pynsx.UnitCellCharacter_g01_set)
    __swig_setmethods__["g02"] = _pynsx.UnitCellCharacter_g02_set
    __swig_getmethods__["g02"] = _pynsx.UnitCellCharacter_g02_get
    if _newclass:
        g02 = _swig_property(_pynsx.UnitCellCharacter_g02_get, _pynsx.UnitCellCharacter_g02_set)
    __swig_setmethods__["g11"] = _pynsx.UnitCellCharacter_g11_set
    __swig_getmethods__["g11"] = _pynsx.UnitCellCharacter_g11_get
    if _newclass:
        g11 = _swig_property(_pynsx.UnitCellCharacter_g11_get, _pynsx.UnitCellCharacter_g11_set)
    __swig_setmethods__["g12"] = _pynsx.UnitCellCharacter_g12_set
    __swig_getmethods__["g12"] = _pynsx.UnitCellCharacter_g12_get
    if _newclass:
        g12 = _swig_property(_pynsx.UnitCellCharacter_g12_get, _pynsx.UnitCellCharacter_g12_set)
    __swig_setmethods__["g22"] = _pynsx.UnitCellCharacter_g22_set
    __swig_getmethods__["g22"] = _pynsx.UnitCellCharacter_g22_get
    if _newclass:
        g22 = _swig_property(_pynsx.UnitCellCharacter_g22_get, _pynsx.UnitCellCharacter_g22_set)
    __swig_setmethods__["a"] = _pynsx.UnitCellCharacter_a_set
    __swig_getmethods__["a"] = _pynsx.UnitCellCharacter_a_get
    if _newclass:
        a = _swig_property(_pynsx.UnitCellCharacter_a_get, _pynsx.UnitCellCharacter_a_set)
    __swig_setmethods__["b"] = _pynsx.UnitCellCharacter_b_set
    __swig_getmethods__["b"] = _pynsx.UnitCellCharacter_b_get
    if _newclass:
        b = _swig_property(_pynsx.UnitCellCharacter_b_get, _pynsx.UnitCellCharacter_b_set)
    __swig_setmethods__["c"] = _pynsx.UnitCellCharacter_c_set
    __swig_getmethods__["c"] = _pynsx.UnitCellCharacter_c_get
    if _newclass:
        c = _swig_property(_pynsx.UnitCellCharacter_c_get, _pynsx.UnitCellCharacter_c_set)
    __swig_setmethods__["alpha"] = _pynsx.UnitCellCharacter_alpha_set
    __swig_getmethods__["alpha"] = _pynsx.UnitCellCharacter_alpha_get
    if _newclass:
        alpha = _swig_property(_pynsx.UnitCellCharacter_alpha_get, _pynsx.UnitCellCharacter_alpha_set)
    __swig_setmethods__["beta"] = _pynsx.UnitCellCharacter_beta_set
    __swig_getmethods__["beta"] = _pynsx.UnitCellCharacter_beta_get
    if _newclass:
        beta = _swig_property(_pynsx.UnitCellCharacter_beta_get, _pynsx.UnitCellCharacter_beta_set)
    __swig_setmethods__["gamma"] = _pynsx.UnitCellCharacter_gamma_set
    __swig_getmethods__["gamma"] = _pynsx.UnitCellCharacter_gamma_get
    if _newclass:
        gamma = _swig_property(_pynsx.UnitCellCharacter_gamma_get, _pynsx.UnitCellCharacter_gamma_set)

    def __init__(self, *args):
        this = _pynsx.new_UnitCellCharacter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_UnitCellCharacter
    __del__ = lambda self: None
UnitCellCharacter_swigregister = _pynsx.UnitCellCharacter_swigregister
UnitCellCharacter_swigregister(UnitCellCharacter)

class UnitCellState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitCellState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitCellState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["orientation"] = _pynsx.UnitCellState_orientation_set
    __swig_getmethods__["orientation"] = _pynsx.UnitCellState_orientation_get
    if _newclass:
        orientation = _swig_property(_pynsx.UnitCellState_orientation_get, _pynsx.UnitCellState_orientation_set)
    __swig_setmethods__["character"] = _pynsx.UnitCellState_character_set
    __swig_getmethods__["character"] = _pynsx.UnitCellState_character_get
    if _newclass:
        character = _swig_property(_pynsx.UnitCellState_character_get, _pynsx.UnitCellState_character_set)

    def __init__(self):
        this = _pynsx.new_UnitCellState()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_UnitCellState
    __del__ = lambda self: None
UnitCellState_swigregister = _pynsx.UnitCellState_swigregister
UnitCellState_swigregister(UnitCellState)

class UnitCell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitCell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_UnitCell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_UnitCell
    __del__ = lambda self: None

    def setParameters(self, a, b, c, alpha, beta, gamma):
        return _pynsx.UnitCell_setParameters(self, a, b, c, alpha, beta, gamma)

    def setReciprocalParameters(self, arg2, bs, cs, alphas, betas, gammas):
        return _pynsx.UnitCell_setReciprocalParameters(self, arg2, bs, cs, alphas, betas, gammas)

    def setReciprocalBasis(self, b_transposed):
        return _pynsx.UnitCell_setReciprocalBasis(self, b_transposed)

    def setLatticeCentring(self, centring):
        return _pynsx.UnitCell_setLatticeCentring(self, centring)

    def setBravaisType(self, bravais):
        return _pynsx.UnitCell_setBravaisType(self, bravais)

    def bravaisTypeSymbol(self):
        return _pynsx.UnitCell_bravaisTypeSymbol(self)

    def generateReflectionsInShell(self, dmin, dmax, wavelength):
        return _pynsx.UnitCell_generateReflectionsInShell(self, dmin, dmax, wavelength)

    def angle(self, hkl1, hkl2):
        return _pynsx.UnitCell_angle(self, hkl1, hkl2)

    def setNiggli(self, niggli):
        return _pynsx.UnitCell_setNiggli(self, niggli)

    def niggliCharacter(self):
        return _pynsx.UnitCell_niggliCharacter(self)

    def niggliBasis(self):
        return _pynsx.UnitCell_niggliBasis(self)

    def reciprocalNiggliBasis(self):
        return _pynsx.UnitCell_reciprocalNiggliBasis(self)

    def applyNiggliConstraints(self):
        return _pynsx.UnitCell_applyNiggliConstraints(self)

    def d(self, h, k, l):
        return _pynsx.UnitCell_d(self, h, k, l)

    def printSelf(self, os):
        return _pynsx.UnitCell_printSelf(self, os)

    def z(self):
        return _pynsx.UnitCell_z(self)

    def setZ(self, Z):
        return _pynsx.UnitCell_setZ(self, Z)

    def material(self, *args):
        return _pynsx.UnitCell_material(self, *args)

    def setMaterial(self, material):
        return _pynsx.UnitCell_setMaterial(self, material)

    def setSpaceGroup(self, space_group):
        return _pynsx.UnitCell_setSpaceGroup(self, space_group)

    def spaceGroup(self):
        return _pynsx.UnitCell_spaceGroup(self)

    def setName(self, name):
        return _pynsx.UnitCell_setName(self, name)

    def name(self):
        return _pynsx.UnitCell_name(self)

    def setIndexingTolerance(self, tolerance):
        return _pynsx.UnitCell_setIndexingTolerance(self, tolerance)

    def indexingTolerance(self):
        return _pynsx.UnitCell_indexingTolerance(self)

    def basis(self):
        return _pynsx.UnitCell_basis(self)

    def setBasis(self, a):
        return _pynsx.UnitCell_setBasis(self, a)

    def reciprocalBasis(self):
        return _pynsx.UnitCell_reciprocalBasis(self)

    def setMetric(self, g00, g01, g02, g11, g12, g22):
        return _pynsx.UnitCell_setMetric(self, g00, g01, g02, g11, g12, g22)

    def metric(self):
        return _pynsx.UnitCell_metric(self)

    def reciprocalMetric(self):
        return _pynsx.UnitCell_reciprocalMetric(self)

    def volume(self):
        return _pynsx.UnitCell_volume(self)

    def index(self, q):
        return _pynsx.UnitCell_index(self, q)

    def fromIndex(self, hkl):
        return _pynsx.UnitCell_fromIndex(self, hkl)

    def character(self):
        return _pynsx.UnitCell_character(self)

    def characterSigmas(self):
        return _pynsx.UnitCell_characterSigmas(self)

    def reciprocalCharacter(self):
        return _pynsx.UnitCell_reciprocalCharacter(self)

    def reduce(self, niggli_only, niggliTolerance, gruberTolerance):
        return _pynsx.UnitCell_reduce(self, niggli_only, niggliTolerance, gruberTolerance)

    def transform(self, P):
        return _pynsx.UnitCell_transform(self, P)

    def equivalent(self, other, tolerance):
        return _pynsx.UnitCell_equivalent(self, other, tolerance)

    def niggliTransformation(self):
        return _pynsx.UnitCell_niggliTransformation(self)

    def orientation(self):
        return _pynsx.UnitCell_orientation(self)

    def niggliOrientation(self):
        return _pynsx.UnitCell_niggliOrientation(self)

    def parameters(self):
        return _pynsx.UnitCell_parameters(self)

    def setParameterCovariance(self, cov):
        return _pynsx.UnitCell_setParameterCovariance(self, cov)

    def fromParameters(self, U0, uOffset, parameters):
        return _pynsx.UnitCell_fromParameters(self, U0, uOffset, parameters)

    def compatibleSpaceGroups(self):
        return _pynsx.UnitCell_compatibleSpaceGroups(self)

    def initState(self, data):
        return _pynsx.UnitCell_initState(self, data)

    def setState(self, data, frame, state):
        return _pynsx.UnitCell_setState(self, data, frame, state)

    def state(self, data, frame):
        return _pynsx.UnitCell_state(self, data, frame)

    def interpolate(self, *args):
        return _pynsx.UnitCell_interpolate(self, *args)
UnitCell_swigregister = _pynsx.UnitCell_swigregister
UnitCell_swigregister(UnitCell)

class DShell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DShell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DShell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dmin"] = _pynsx.DShell_dmin_set
    __swig_getmethods__["dmin"] = _pynsx.DShell_dmin_get
    if _newclass:
        dmin = _swig_property(_pynsx.DShell_dmin_get, _pynsx.DShell_dmin_set)
    __swig_setmethods__["dmax"] = _pynsx.DShell_dmax_set
    __swig_getmethods__["dmax"] = _pynsx.DShell_dmax_get
    if _newclass:
        dmax = _swig_property(_pynsx.DShell_dmax_get, _pynsx.DShell_dmax_set)
    __swig_setmethods__["peaks"] = _pynsx.DShell_peaks_set
    __swig_getmethods__["peaks"] = _pynsx.DShell_peaks_get
    if _newclass:
        peaks = _swig_property(_pynsx.DShell_peaks_get, _pynsx.DShell_peaks_set)

    def __init__(self):
        this = _pynsx.new_DShell()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_DShell
    __del__ = lambda self: None
DShell_swigregister = _pynsx.DShell_swigregister
DShell_swigregister(DShell)

class ResolutionShell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResolutionShell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResolutionShell, name)
    __repr__ = _swig_repr

    def __init__(self, dmin, dmax, num_shells):
        this = _pynsx.new_ResolutionShell(dmin, dmax, num_shells)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addPeak(self, peak):
        return _pynsx.ResolutionShell_addPeak(self, peak)

    def shell(self, i):
        return _pynsx.ResolutionShell_shell(self, i)

    def nShells(self):
        return _pynsx.ResolutionShell_nShells(self)
    __swig_destroy__ = _pynsx.delete_ResolutionShell
    __del__ = lambda self: None
ResolutionShell_swigregister = _pynsx.ResolutionShell_swigregister
ResolutionShell_swigregister(ResolutionShell)

class RFactor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RFactor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RFactor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pynsx.new_RFactor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_RFactor
    __del__ = lambda self: None

    def calculate(self, data):
        return _pynsx.RFactor_calculate(self, data)

    def Rmerge(self):
        return _pynsx.RFactor_Rmerge(self)

    def Rmeas(self):
        return _pynsx.RFactor_Rmeas(self)

    def Rpim(self):
        return _pynsx.RFactor_Rpim(self)

    def expectedRmerge(self):
        return _pynsx.RFactor_expectedRmerge(self)

    def expectedRmeas(self):
        return _pynsx.RFactor_expectedRmeas(self)

    def expectedRpim(self):
        return _pynsx.RFactor_expectedRpim(self)
RFactor_swigregister = _pynsx.RFactor_swigregister
RFactor_swigregister(RFactor)

class CC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CC, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pynsx.new_CC()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calculate(self, *args):
        return _pynsx.CC_calculate(self, *args)

    def CChalf(self):
        return _pynsx.CC_CChalf(self)

    def CCstar(self):
        return _pynsx.CC_CCstar(self)

    def nPeaks(self):
        return _pynsx.CC_nPeaks(self)
    __swig_destroy__ = _pynsx.delete_CC
    __del__ = lambda self: None
CC_swigregister = _pynsx.CC_swigregister
CC_swigregister(CC)

class MillerIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MillerIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MillerIndex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_MillerIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_MillerIndex
    __del__ = lambda self: None

    def rowVector(self):
        return _pynsx.MillerIndex_rowVector(self)

    def __call__(self, *args):
        return _pynsx.MillerIndex___call__(self, *args)

    def _print(self, os):
        return _pynsx.MillerIndex__print(self, os)

    def __lt__(self, other):
        return _pynsx.MillerIndex___lt__(self, other)

    def error(self):
        return _pynsx.MillerIndex_error(self)

    def indexed(self, tolerance):
        return _pynsx.MillerIndex_indexed(self, tolerance)
MillerIndex_swigregister = _pynsx.MillerIndex_swigregister
MillerIndex_swigregister(MillerIndex)

class MillerIndexList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MillerIndexList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MillerIndexList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.MillerIndexList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.MillerIndexList___nonzero__(self)

    def __bool__(self):
        return _pynsx.MillerIndexList___bool__(self)

    def __len__(self):
        return _pynsx.MillerIndexList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.MillerIndexList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.MillerIndexList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.MillerIndexList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.MillerIndexList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.MillerIndexList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.MillerIndexList___setitem__(self, *args)

    def pop(self):
        return _pynsx.MillerIndexList_pop(self)

    def append(self, x):
        return _pynsx.MillerIndexList_append(self, x)

    def empty(self):
        return _pynsx.MillerIndexList_empty(self)

    def size(self):
        return _pynsx.MillerIndexList_size(self)

    def swap(self, v):
        return _pynsx.MillerIndexList_swap(self, v)

    def begin(self):
        return _pynsx.MillerIndexList_begin(self)

    def end(self):
        return _pynsx.MillerIndexList_end(self)

    def rbegin(self):
        return _pynsx.MillerIndexList_rbegin(self)

    def rend(self):
        return _pynsx.MillerIndexList_rend(self)

    def clear(self):
        return _pynsx.MillerIndexList_clear(self)

    def get_allocator(self):
        return _pynsx.MillerIndexList_get_allocator(self)

    def pop_back(self):
        return _pynsx.MillerIndexList_pop_back(self)

    def erase(self, *args):
        return _pynsx.MillerIndexList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_MillerIndexList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.MillerIndexList_push_back(self, x)

    def front(self):
        return _pynsx.MillerIndexList_front(self)

    def back(self):
        return _pynsx.MillerIndexList_back(self)

    def assign(self, n, x):
        return _pynsx.MillerIndexList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.MillerIndexList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.MillerIndexList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.MillerIndexList_reserve(self, n)

    def capacity(self):
        return _pynsx.MillerIndexList_capacity(self)
    __swig_destroy__ = _pynsx.delete_MillerIndexList
    __del__ = lambda self: None
MillerIndexList_swigregister = _pynsx.MillerIndexList_swigregister
MillerIndexList_swigregister(MillerIndexList)

class MergedPeak(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MergedPeak, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MergedPeak, name)
    __repr__ = _swig_repr

    def __init__(self, grp, friedel=False):
        this = _pynsx.new_MergedPeak(grp, friedel)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addPeak(self, peak):
        return _pynsx.MergedPeak_addPeak(self, peak)

    def index(self):
        return _pynsx.MergedPeak_index(self)

    def intensity(self):
        return _pynsx.MergedPeak_intensity(self)

    def redundancy(self):
        return _pynsx.MergedPeak_redundancy(self)

    def chi2(self):
        return _pynsx.MergedPeak_chi2(self)

    def pValue(self):
        return _pynsx.MergedPeak_pValue(self)

    def peaks(self):
        return _pynsx.MergedPeak_peaks(self)

    def split(self):
        return _pynsx.MergedPeak_split(self)
    __swig_destroy__ = _pynsx.delete_MergedPeak
    __del__ = lambda self: None
MergedPeak_swigregister = _pynsx.MergedPeak_swigregister
MergedPeak_swigregister(MergedPeak)

class SpaceGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpaceGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpaceGroup, name)
    __repr__ = _swig_repr
    if _newclass:
        symbols = staticmethod(_pynsx.SpaceGroup_symbols)
    else:
        symbols = _pynsx.SpaceGroup_symbols

    def __init__(self, *args):
        this = _pynsx.new_SpaceGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def symbol(self):
        return _pynsx.SpaceGroup_symbol(self)

    def generators(self):
        return _pynsx.SpaceGroup_generators(self)

    def groupElements(self):
        return _pynsx.SpaceGroup_groupElements(self)

    def isExtinct(self, hkl):
        return _pynsx.SpaceGroup_isExtinct(self, hkl)

    def isCentrosymmetric(self):
        return _pynsx.SpaceGroup_isCentrosymmetric(self)

    def _print(self, os):
        return _pynsx.SpaceGroup__print(self, os)

    def bravaisType(self):
        return _pynsx.SpaceGroup_bravaisType(self)

    def fractionExtinct(self, hkls):
        return _pynsx.SpaceGroup_fractionExtinct(self, hkls)

    def bravaisTypeSymbol(self):
        return _pynsx.SpaceGroup_bravaisTypeSymbol(self)

    def id(self):
        return _pynsx.SpaceGroup_id(self)

    def isEquivalent(self, miller_index1, miller_index2, friedel=False):
        return _pynsx.SpaceGroup_isEquivalent(self, miller_index1, miller_index2, friedel)

    def isFriedelEquivalent(self, miller_index1, miller_index2):
        return _pynsx.SpaceGroup_isFriedelEquivalent(self, miller_index1, miller_index2)

    def findEquivalences(self, peak_list, friedel):
        return _pynsx.SpaceGroup_findEquivalences(self, peak_list, friedel)
    __swig_destroy__ = _pynsx.delete_SpaceGroup
    __del__ = lambda self: None
SpaceGroup_swigregister = _pynsx.SpaceGroup_swigregister
SpaceGroup_swigregister(SpaceGroup)

def SpaceGroup_symbols():
    return _pynsx.SpaceGroup_symbols()
SpaceGroup_symbols = _pynsx.SpaceGroup_symbols

class NiggliReduction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NiggliReduction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NiggliReduction, name)
    __repr__ = _swig_repr

    def __init__(self, g, epsilon):
        this = _pynsx.new_NiggliReduction(g, epsilon)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reduce(self, newg, P):
        return _pynsx.NiggliReduction_reduce(self, newg, P)
    if _newclass:
        setIterMax = staticmethod(_pynsx.NiggliReduction_setIterMax)
    else:
        setIterMax = _pynsx.NiggliReduction_setIterMax
    __swig_destroy__ = _pynsx.delete_NiggliReduction
    __del__ = lambda self: None
NiggliReduction_swigregister = _pynsx.NiggliReduction_swigregister
NiggliReduction_swigregister(NiggliReduction)

def NiggliReduction_setIterMax(max):
    return _pynsx.NiggliReduction_setIterMax(max)
NiggliReduction_setIterMax = _pynsx.NiggliReduction_setIterMax

class GruberReduction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GruberReduction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GruberReduction, name)
    __repr__ = _swig_repr

    def __init__(self, g, epsilon):
        this = _pynsx.new_GruberReduction(g, epsilon)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reduce(self, P, centring, bravais):
        return _pynsx.GruberReduction_reduce(self, P, centring, bravais)

    def classify(self):
        return _pynsx.GruberReduction_classify(self)
    __swig_destroy__ = _pynsx.delete_GruberReduction
    __del__ = lambda self: None
GruberReduction_swigregister = _pynsx.GruberReduction_swigregister
GruberReduction_swigregister(GruberReduction)

class SymOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymOp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_SymOp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_SymOp
    __del__ = lambda self: None

    def __eq__(self, other):
        return _pynsx.SymOp___eq__(self, other)

    def __mul__(self, other):
        return _pynsx.SymOp___mul__(self, other)

    def getMatrix(self):
        return _pynsx.SymOp_getMatrix(self)

    def _print(self, os):
        return _pynsx.SymOp__print(self, os)

    def getAxisOrder(self):
        return _pynsx.SymOp_getAxisOrder(self)

    def getJonesSymbol(self):
        return _pynsx.SymOp_getJonesSymbol(self)

    def hasTranslation(self):
        return _pynsx.SymOp_hasTranslation(self)

    def isPureTranslation(self):
        return _pynsx.SymOp_isPureTranslation(self)

    def getTranslationPart(self):
        return _pynsx.SymOp_getTranslationPart(self)

    def getRotationPart(self):
        return _pynsx.SymOp_getRotationPart(self)

    def translationIsIntegralMultiple(self, other):
        return _pynsx.SymOp_translationIsIntegralMultiple(self, other)
SymOp_swigregister = _pynsx.SymOp_swigregister
SymOp_swigregister(SymOp)

class SymOpList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymOpList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymOpList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.SymOpList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.SymOpList___nonzero__(self)

    def __bool__(self):
        return _pynsx.SymOpList___bool__(self)

    def __len__(self):
        return _pynsx.SymOpList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.SymOpList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.SymOpList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.SymOpList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.SymOpList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.SymOpList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.SymOpList___setitem__(self, *args)

    def pop(self):
        return _pynsx.SymOpList_pop(self)

    def append(self, x):
        return _pynsx.SymOpList_append(self, x)

    def empty(self):
        return _pynsx.SymOpList_empty(self)

    def size(self):
        return _pynsx.SymOpList_size(self)

    def swap(self, v):
        return _pynsx.SymOpList_swap(self, v)

    def begin(self):
        return _pynsx.SymOpList_begin(self)

    def end(self):
        return _pynsx.SymOpList_end(self)

    def rbegin(self):
        return _pynsx.SymOpList_rbegin(self)

    def rend(self):
        return _pynsx.SymOpList_rend(self)

    def clear(self):
        return _pynsx.SymOpList_clear(self)

    def get_allocator(self):
        return _pynsx.SymOpList_get_allocator(self)

    def pop_back(self):
        return _pynsx.SymOpList_pop_back(self)

    def erase(self, *args):
        return _pynsx.SymOpList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_SymOpList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.SymOpList_push_back(self, x)

    def front(self):
        return _pynsx.SymOpList_front(self)

    def back(self):
        return _pynsx.SymOpList_back(self)

    def assign(self, n, x):
        return _pynsx.SymOpList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.SymOpList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.SymOpList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.SymOpList_reserve(self, n)

    def capacity(self):
        return _pynsx.SymOpList_capacity(self)
    __swig_destroy__ = _pynsx.delete_SymOpList
    __del__ = lambda self: None
SymOpList_swigregister = _pynsx.SymOpList_swigregister
SymOpList_swigregister(SymOpList)

class Vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Vertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_Vertex
    __del__ = lambda self: None

    def _print(self, os):
        return _pynsx.Vertex__print(self, os)
    __swig_setmethods__["_coords"] = _pynsx.Vertex__coords_set
    __swig_getmethods__["_coords"] = _pynsx.Vertex__coords_get
    if _newclass:
        _coords = _swig_property(_pynsx.Vertex__coords_get, _pynsx.Vertex__coords_set)
    __swig_setmethods__["_duplicate"] = _pynsx.Vertex__duplicate_set
    __swig_getmethods__["_duplicate"] = _pynsx.Vertex__duplicate_get
    if _newclass:
        _duplicate = _swig_property(_pynsx.Vertex__duplicate_get, _pynsx.Vertex__duplicate_set)
    __swig_setmethods__["_onHull"] = _pynsx.Vertex__onHull_set
    __swig_getmethods__["_onHull"] = _pynsx.Vertex__onHull_get
    if _newclass:
        _onHull = _swig_property(_pynsx.Vertex__onHull_get, _pynsx.Vertex__onHull_set)
    __swig_setmethods__["_mark"] = _pynsx.Vertex__mark_set
    __swig_getmethods__["_mark"] = _pynsx.Vertex__mark_get
    if _newclass:
        _mark = _swig_property(_pynsx.Vertex__mark_get, _pynsx.Vertex__mark_set)
    __swig_setmethods__["_id"] = _pynsx.Vertex__id_set
    __swig_getmethods__["_id"] = _pynsx.Vertex__id_get
    if _newclass:
        _id = _swig_property(_pynsx.Vertex__id_get, _pynsx.Vertex__id_set)
Vertex_swigregister = _pynsx.Vertex_swigregister
Vertex_swigregister(Vertex)

class Triangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triangle, name)
    __repr__ = _swig_repr

    def __init__(self, p1, p2, p3):
        this = _pynsx.new_Triangle(p1, p2, p3)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_Triangle
    __del__ = lambda self: None

    def isOutsideBB(self, px, pz):
        return _pynsx.Triangle_isOutsideBB(self, px, pz)

    def rayIntersect(self, point, dir, t1):
        return _pynsx.Triangle_rayIntersect(self, point, dir, t1)

    def calculate(self):
        return _pynsx.Triangle_calculate(self)

    def rotate(self, rotation):
        return _pynsx.Triangle_rotate(self, rotation)
    __swig_setmethods__["_A"] = _pynsx.Triangle__A_set
    __swig_getmethods__["_A"] = _pynsx.Triangle__A_get
    if _newclass:
        _A = _swig_property(_pynsx.Triangle__A_get, _pynsx.Triangle__A_set)
    __swig_setmethods__["_B"] = _pynsx.Triangle__B_set
    __swig_getmethods__["_B"] = _pynsx.Triangle__B_get
    if _newclass:
        _B = _swig_property(_pynsx.Triangle__B_get, _pynsx.Triangle__B_set)
    __swig_setmethods__["_C"] = _pynsx.Triangle__C_set
    __swig_getmethods__["_C"] = _pynsx.Triangle__C_get
    if _newclass:
        _C = _swig_property(_pynsx.Triangle__C_get, _pynsx.Triangle__C_set)
    __swig_setmethods__["_AB"] = _pynsx.Triangle__AB_set
    __swig_getmethods__["_AB"] = _pynsx.Triangle__AB_get
    if _newclass:
        _AB = _swig_property(_pynsx.Triangle__AB_get, _pynsx.Triangle__AB_set)
    __swig_setmethods__["_AC"] = _pynsx.Triangle__AC_set
    __swig_getmethods__["_AC"] = _pynsx.Triangle__AC_get
    if _newclass:
        _AC = _swig_property(_pynsx.Triangle__AC_get, _pynsx.Triangle__AC_set)
    __swig_setmethods__["_normal"] = _pynsx.Triangle__normal_set
    __swig_getmethods__["_normal"] = _pynsx.Triangle__normal_get
    if _newclass:
        _normal = _swig_property(_pynsx.Triangle__normal_get, _pynsx.Triangle__normal_set)
    __swig_setmethods__["_d"] = _pynsx.Triangle__d_set
    __swig_getmethods__["_d"] = _pynsx.Triangle__d_get
    if _newclass:
        _d = _swig_property(_pynsx.Triangle__d_get, _pynsx.Triangle__d_set)
    __swig_setmethods__["_dot00"] = _pynsx.Triangle__dot00_set
    __swig_getmethods__["_dot00"] = _pynsx.Triangle__dot00_get
    if _newclass:
        _dot00 = _swig_property(_pynsx.Triangle__dot00_get, _pynsx.Triangle__dot00_set)
    __swig_setmethods__["_dot11"] = _pynsx.Triangle__dot11_set
    __swig_getmethods__["_dot11"] = _pynsx.Triangle__dot11_get
    if _newclass:
        _dot11 = _swig_property(_pynsx.Triangle__dot11_get, _pynsx.Triangle__dot11_set)
    __swig_setmethods__["_dot01"] = _pynsx.Triangle__dot01_set
    __swig_getmethods__["_dot01"] = _pynsx.Triangle__dot01_get
    if _newclass:
        _dot01 = _swig_property(_pynsx.Triangle__dot01_get, _pynsx.Triangle__dot01_set)
    __swig_setmethods__["_dot002d"] = _pynsx.Triangle__dot002d_set
    __swig_getmethods__["_dot002d"] = _pynsx.Triangle__dot002d_get
    if _newclass:
        _dot002d = _swig_property(_pynsx.Triangle__dot002d_get, _pynsx.Triangle__dot002d_set)
    __swig_setmethods__["_dot112d"] = _pynsx.Triangle__dot112d_set
    __swig_getmethods__["_dot112d"] = _pynsx.Triangle__dot112d_get
    if _newclass:
        _dot112d = _swig_property(_pynsx.Triangle__dot112d_get, _pynsx.Triangle__dot112d_set)
    __swig_setmethods__["_dot012d"] = _pynsx.Triangle__dot012d_set
    __swig_getmethods__["_dot012d"] = _pynsx.Triangle__dot012d_get
    if _newclass:
        _dot012d = _swig_property(_pynsx.Triangle__dot012d_get, _pynsx.Triangle__dot012d_set)
    __swig_setmethods__["_xmin"] = _pynsx.Triangle__xmin_set
    __swig_getmethods__["_xmin"] = _pynsx.Triangle__xmin_get
    if _newclass:
        _xmin = _swig_property(_pynsx.Triangle__xmin_get, _pynsx.Triangle__xmin_set)
    __swig_setmethods__["_zmin"] = _pynsx.Triangle__zmin_set
    __swig_getmethods__["_zmin"] = _pynsx.Triangle__zmin_get
    if _newclass:
        _zmin = _swig_property(_pynsx.Triangle__zmin_get, _pynsx.Triangle__zmin_set)
    __swig_setmethods__["_xmax"] = _pynsx.Triangle__xmax_set
    __swig_getmethods__["_xmax"] = _pynsx.Triangle__xmax_get
    if _newclass:
        _xmax = _swig_property(_pynsx.Triangle__xmax_get, _pynsx.Triangle__xmax_set)
    __swig_setmethods__["_zmax"] = _pynsx.Triangle__zmax_set
    __swig_getmethods__["_zmax"] = _pynsx.Triangle__zmax_get
    if _newclass:
        _zmax = _swig_property(_pynsx.Triangle__zmax_get, _pynsx.Triangle__zmax_set)
Triangle_swigregister = _pynsx.Triangle_swigregister
Triangle_swigregister(Triangle)

class Face(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Face, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Face, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Face(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_Face
    __del__ = lambda self: None

    def volumeSign(self, v):
        return _pynsx.Face_volumeSign(self, v)

    def volume(self, pos):
        return _pynsx.Face_volume(self, pos)

    def _print(self, os):
        return _pynsx.Face__print(self, os)
    __swig_setmethods__["_edges"] = _pynsx.Face__edges_set
    __swig_getmethods__["_edges"] = _pynsx.Face__edges_get
    if _newclass:
        _edges = _swig_property(_pynsx.Face__edges_get, _pynsx.Face__edges_set)
    __swig_setmethods__["_vertices"] = _pynsx.Face__vertices_set
    __swig_getmethods__["_vertices"] = _pynsx.Face__vertices_get
    if _newclass:
        _vertices = _swig_property(_pynsx.Face__vertices_get, _pynsx.Face__vertices_set)
    __swig_setmethods__["_visible"] = _pynsx.Face__visible_set
    __swig_getmethods__["_visible"] = _pynsx.Face__visible_get
    if _newclass:
        _visible = _swig_property(_pynsx.Face__visible_get, _pynsx.Face__visible_set)
    __swig_setmethods__["_id"] = _pynsx.Face__id_set
    __swig_getmethods__["_id"] = _pynsx.Face__id_get
    if _newclass:
        _id = _swig_property(_pynsx.Face__id_get, _pynsx.Face__id_set)
Face_swigregister = _pynsx.Face_swigregister
Face_swigregister(Face)

class MCAbsorption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCAbsorption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCAbsorption, name)
    __repr__ = _swig_repr

    def __init__(self, convex_hull, source_width, source_height, source_y_pos):
        this = _pynsx.new_MCAbsorption(convex_hull, source_width, source_height, source_y_pos)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_MCAbsorption
    __del__ = lambda self: None

    def setConvexHull(self, convex_hull):
        return _pynsx.MCAbsorption_setConvexHull(self, convex_hull)

    def setMuAbsorption(self, mu_absorption):
        return _pynsx.MCAbsorption_setMuAbsorption(self, mu_absorption)

    def setMuScattering(self, mu_scattering):
        return _pynsx.MCAbsorption_setMuScattering(self, mu_scattering)

    def run(self, nIterations, outV, sampleOrientation):
        return _pynsx.MCAbsorption_run(self, nIterations, outV, sampleOrientation)
MCAbsorption_swigregister = _pynsx.MCAbsorption_swigregister
MCAbsorption_swigregister(MCAbsorption)

class ConvexHull(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexHull, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexHull, name)
    __repr__ = _swig_repr
    if _newclass:
        isCoplanar = staticmethod(_pynsx.ConvexHull_isCoplanar)
    else:
        isCoplanar = _pynsx.ConvexHull_isCoplanar
    __swig_destroy__ = _pynsx.delete_ConvexHull
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pynsx.new_ConvexHull(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        return _pynsx.ConvexHull_reset(self)

    def addVertex(self, coords):
        return _pynsx.ConvexHull_addVertex(self, coords)

    def removeVertex(self, coords, tolerance):
        return _pynsx.ConvexHull_removeVertex(self, coords, tolerance)

    def updateHull(self):
        return _pynsx.ConvexHull_updateHull(self)

    def vertices(self):
        return _pynsx.ConvexHull_vertices(self)

    def nVertices(self):
        return _pynsx.ConvexHull_nVertices(self)

    def edges(self):
        return _pynsx.ConvexHull_edges(self)

    def nEdges(self):
        return _pynsx.ConvexHull_nEdges(self)

    def faces(self):
        return _pynsx.ConvexHull_faces(self)

    def nFaces(self):
        return _pynsx.ConvexHull_nFaces(self)

    def center(self):
        return _pynsx.ConvexHull_center(self)

    def translate(self, x, y, z):
        return _pynsx.ConvexHull_translate(self, x, y, z)

    def translateToCenter(self):
        return _pynsx.ConvexHull_translateToCenter(self)

    def scale(self, factor):
        return _pynsx.ConvexHull_scale(self, factor)

    def rotate(self, rotation):
        return _pynsx.ConvexHull_rotate(self, rotation)

    def volume(self):
        return _pynsx.ConvexHull_volume(self)

    def _print(self, os):
        return _pynsx.ConvexHull__print(self, os)

    def checkEulerConditions(self):
        return _pynsx.ConvexHull_checkEulerConditions(self)

    def createFaceCache(self, *args):
        return _pynsx.ConvexHull_createFaceCache(self, *args)

    def contains(self, v):
        return _pynsx.ConvexHull_contains(self, v)

    def aabb(self):
        return _pynsx.ConvexHull_aabb(self)
ConvexHull_swigregister = _pynsx.ConvexHull_swigregister
ConvexHull_swigregister(ConvexHull)

def ConvexHull_isCoplanar(v0, v1, v2):
    return _pynsx.ConvexHull_isCoplanar(v0, v1, v2)
ConvexHull_isCoplanar = _pynsx.ConvexHull_isCoplanar

class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Edge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_Edge
    __del__ = lambda self: None

    def _print(self, os):
        return _pynsx.Edge__print(self, os)
    __swig_setmethods__["_faces"] = _pynsx.Edge__faces_set
    __swig_getmethods__["_faces"] = _pynsx.Edge__faces_get
    if _newclass:
        _faces = _swig_property(_pynsx.Edge__faces_get, _pynsx.Edge__faces_set)
    __swig_setmethods__["_vertices"] = _pynsx.Edge__vertices_set
    __swig_getmethods__["_vertices"] = _pynsx.Edge__vertices_get
    if _newclass:
        _vertices = _swig_property(_pynsx.Edge__vertices_get, _pynsx.Edge__vertices_set)
    __swig_setmethods__["_newFace"] = _pynsx.Edge__newFace_set
    __swig_getmethods__["_newFace"] = _pynsx.Edge__newFace_get
    if _newclass:
        _newFace = _swig_property(_pynsx.Edge__newFace_get, _pynsx.Edge__newFace_set)
    __swig_setmethods__["_delete"] = _pynsx.Edge__delete_set
    __swig_getmethods__["_delete"] = _pynsx.Edge__delete_get
    if _newclass:
        _delete = _swig_property(_pynsx.Edge__delete_get, _pynsx.Edge__delete_set)
    __swig_setmethods__["_id"] = _pynsx.Edge__id_set
    __swig_getmethods__["_id"] = _pynsx.Edge__id_get
    if _newclass:
        _id = _swig_property(_pynsx.Edge__id_get, _pynsx.Edge__id_set)
Edge_swigregister = _pynsx.Edge_swigregister
Edge_swigregister(Edge)


def __lshift__(*args):
    return _pynsx.__lshift__(*args)
__lshift__ = _pynsx.__lshift__
class BrillouinZone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrillouinZone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrillouinZone, name)
    __repr__ = _swig_repr

    def __init__(self, B, eps=1e-6):
        this = _pynsx.new_BrillouinZone(B, eps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def inside(self, q):
        return _pynsx.BrillouinZone_inside(self, q)

    def vertices(self):
        return _pynsx.BrillouinZone_vertices(self)

    def normals(self):
        return _pynsx.BrillouinZone_normals(self)

    def convexHull(self):
        return _pynsx.BrillouinZone_convexHull(self)

    def innerRadius(self):
        return _pynsx.BrillouinZone_innerRadius(self)

    def outerRadius(self):
        return _pynsx.BrillouinZone_outerRadius(self)

    def detectorConvexHull(self, q0, data):
        return _pynsx.BrillouinZone_detectorConvexHull(self, q0, data)
    __swig_destroy__ = _pynsx.delete_BrillouinZone
    __del__ = lambda self: None
BrillouinZone_swigregister = _pynsx.BrillouinZone_swigregister
BrillouinZone_swigregister(BrillouinZone)

class RawDataReaderParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawDataReaderParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RawDataReaderParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wavelength"] = _pynsx.RawDataReaderParameters_wavelength_set
    __swig_getmethods__["wavelength"] = _pynsx.RawDataReaderParameters_wavelength_get
    if _newclass:
        wavelength = _swig_property(_pynsx.RawDataReaderParameters_wavelength_get, _pynsx.RawDataReaderParameters_wavelength_set)
    __swig_setmethods__["delta_omega"] = _pynsx.RawDataReaderParameters_delta_omega_set
    __swig_getmethods__["delta_omega"] = _pynsx.RawDataReaderParameters_delta_omega_get
    if _newclass:
        delta_omega = _swig_property(_pynsx.RawDataReaderParameters_delta_omega_get, _pynsx.RawDataReaderParameters_delta_omega_set)
    __swig_setmethods__["delta_chi"] = _pynsx.RawDataReaderParameters_delta_chi_set
    __swig_getmethods__["delta_chi"] = _pynsx.RawDataReaderParameters_delta_chi_get
    if _newclass:
        delta_chi = _swig_property(_pynsx.RawDataReaderParameters_delta_chi_get, _pynsx.RawDataReaderParameters_delta_chi_set)
    __swig_setmethods__["delta_phi"] = _pynsx.RawDataReaderParameters_delta_phi_set
    __swig_getmethods__["delta_phi"] = _pynsx.RawDataReaderParameters_delta_phi_get
    if _newclass:
        delta_phi = _swig_property(_pynsx.RawDataReaderParameters_delta_phi_get, _pynsx.RawDataReaderParameters_delta_phi_set)
    __swig_setmethods__["row_major"] = _pynsx.RawDataReaderParameters_row_major_set
    __swig_getmethods__["row_major"] = _pynsx.RawDataReaderParameters_row_major_get
    if _newclass:
        row_major = _swig_property(_pynsx.RawDataReaderParameters_row_major_get, _pynsx.RawDataReaderParameters_row_major_set)
    __swig_setmethods__["swap_endian"] = _pynsx.RawDataReaderParameters_swap_endian_set
    __swig_getmethods__["swap_endian"] = _pynsx.RawDataReaderParameters_swap_endian_get
    if _newclass:
        swap_endian = _swig_property(_pynsx.RawDataReaderParameters_swap_endian_get, _pynsx.RawDataReaderParameters_swap_endian_set)
    __swig_setmethods__["bpp"] = _pynsx.RawDataReaderParameters_bpp_set
    __swig_getmethods__["bpp"] = _pynsx.RawDataReaderParameters_bpp_get
    if _newclass:
        bpp = _swig_property(_pynsx.RawDataReaderParameters_bpp_get, _pynsx.RawDataReaderParameters_bpp_set)

    def __init__(self):
        this = _pynsx.new_RawDataReaderParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_RawDataReaderParameters
    __del__ = lambda self: None
RawDataReaderParameters_swigregister = _pynsx.RawDataReaderParameters_swigregister
RawDataReaderParameters_swigregister(RawDataReaderParameters)

class RawDataReader(IDataReader):
    __swig_setmethods__ = {}
    for _s in [IDataReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawDataReader, name, value)
    __swig_getmethods__ = {}
    for _s in [IDataReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawDataReader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_RawDataReader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_RawDataReader
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.RawDataReader_clone(self)

    def addFrame(self, filename):
        return _pynsx.RawDataReader_addFrame(self, filename)

    def open(self):
        return _pynsx.RawDataReader_open(self)

    def close(self):
        return _pynsx.RawDataReader_close(self)

    def data(self, frame):
        return _pynsx.RawDataReader_data(self, frame)

    def parameters(self):
        return _pynsx.RawDataReader_parameters(self)

    def setParameters(self, parameters):
        return _pynsx.RawDataReader_setParameters(self, parameters)

    def swapEndian(self):
        return _pynsx.RawDataReader_swapEndian(self)
RawDataReader_swigregister = _pynsx.RawDataReader_swigregister
RawDataReader_swigregister(RawDataReader)

class TiffDataReader(IDataReader):
    __swig_setmethods__ = {}
    for _s in [IDataReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TiffDataReader, name, value)
    __swig_getmethods__ = {}
    for _s in [IDataReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TiffDataReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pynsx.delete_TiffDataReader
    __del__ = lambda self: None

    def clone(self):
        return _pynsx.TiffDataReader_clone(self)

    def open(self):
        return _pynsx.TiffDataReader_open(self)

    def close(self):
        return _pynsx.TiffDataReader_close(self)

    def data(self, frame):
        return _pynsx.TiffDataReader_data(self, frame)
TiffDataReader_swigregister = _pynsx.TiffDataReader_swigregister
TiffDataReader_swigregister(TiffDataReader)

FILTER_BLOSC_VERSION = _pynsx.FILTER_BLOSC_VERSION
FILTER_BLOSC = _pynsx.FILTER_BLOSC

def register_blosc(version, date):
    return _pynsx.register_blosc(version, date)
register_blosc = _pynsx.register_blosc
class DetectorFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetectorFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetectorFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
DetectorFactory_swigregister = _pynsx.DetectorFactory_swigregister
DetectorFactory_swigregister(DetectorFactory)

class InstrumentStateList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentStateList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentStateList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pynsx.InstrumentStateList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pynsx.InstrumentStateList___nonzero__(self)

    def __bool__(self):
        return _pynsx.InstrumentStateList___bool__(self)

    def __len__(self):
        return _pynsx.InstrumentStateList___len__(self)

    def __getslice__(self, i, j):
        return _pynsx.InstrumentStateList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pynsx.InstrumentStateList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pynsx.InstrumentStateList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pynsx.InstrumentStateList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pynsx.InstrumentStateList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pynsx.InstrumentStateList___setitem__(self, *args)

    def pop(self):
        return _pynsx.InstrumentStateList_pop(self)

    def append(self, x):
        return _pynsx.InstrumentStateList_append(self, x)

    def empty(self):
        return _pynsx.InstrumentStateList_empty(self)

    def size(self):
        return _pynsx.InstrumentStateList_size(self)

    def swap(self, v):
        return _pynsx.InstrumentStateList_swap(self, v)

    def begin(self):
        return _pynsx.InstrumentStateList_begin(self)

    def end(self):
        return _pynsx.InstrumentStateList_end(self)

    def rbegin(self):
        return _pynsx.InstrumentStateList_rbegin(self)

    def rend(self):
        return _pynsx.InstrumentStateList_rend(self)

    def clear(self):
        return _pynsx.InstrumentStateList_clear(self)

    def get_allocator(self):
        return _pynsx.InstrumentStateList_get_allocator(self)

    def pop_back(self):
        return _pynsx.InstrumentStateList_pop_back(self)

    def erase(self, *args):
        return _pynsx.InstrumentStateList_erase(self, *args)

    def __init__(self, *args):
        this = _pynsx.new_InstrumentStateList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pynsx.InstrumentStateList_push_back(self, x)

    def front(self):
        return _pynsx.InstrumentStateList_front(self)

    def back(self):
        return _pynsx.InstrumentStateList_back(self)

    def assign(self, n, x):
        return _pynsx.InstrumentStateList_assign(self, n, x)

    def resize(self, *args):
        return _pynsx.InstrumentStateList_resize(self, *args)

    def insert(self, *args):
        return _pynsx.InstrumentStateList_insert(self, *args)

    def reserve(self, n):
        return _pynsx.InstrumentStateList_reserve(self, n)

    def capacity(self):
        return _pynsx.InstrumentStateList_capacity(self)
    __swig_destroy__ = _pynsx.delete_InstrumentStateList
    __del__ = lambda self: None
InstrumentStateList_swigregister = _pynsx.InstrumentStateList_swigregister
InstrumentStateList_swigregister(InstrumentStateList)

class Experiment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Experiment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Experiment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pynsx.new_Experiment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_Experiment
    __del__ = lambda self: None

    def diffractometer(self, *args):
        return _pynsx.Experiment_diffractometer(self, *args)

    def data(self, *args):
        return _pynsx.Experiment_data(self, *args)

    def name(self):
        return _pynsx.Experiment_name(self)

    def setName(self, name):
        return _pynsx.Experiment_setName(self, name)

    def addData(self, data):
        return _pynsx.Experiment_addData(self, data)

    def hasData(self, name):
        return _pynsx.Experiment_hasData(self, name)

    def removeData(self, name):
        return _pynsx.Experiment_removeData(self, name)
Experiment_swigregister = _pynsx.Experiment_swigregister
Experiment_swigregister(Experiment)

class AxisFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AxisFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AxisFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
AxisFactory_swigregister = _pynsx.AxisFactory_swigregister
AxisFactory_swigregister(AxisFactory)

class IndexerParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexerParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexerParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxdim"] = _pynsx.IndexerParameters_maxdim_set
    __swig_getmethods__["maxdim"] = _pynsx.IndexerParameters_maxdim_get
    if _newclass:
        maxdim = _swig_property(_pynsx.IndexerParameters_maxdim_get, _pynsx.IndexerParameters_maxdim_set)
    __swig_setmethods__["nSolutions"] = _pynsx.IndexerParameters_nSolutions_set
    __swig_getmethods__["nSolutions"] = _pynsx.IndexerParameters_nSolutions_get
    if _newclass:
        nSolutions = _swig_property(_pynsx.IndexerParameters_nSolutions_get, _pynsx.IndexerParameters_nSolutions_set)
    __swig_setmethods__["nVertices"] = _pynsx.IndexerParameters_nVertices_set
    __swig_getmethods__["nVertices"] = _pynsx.IndexerParameters_nVertices_get
    if _newclass:
        nVertices = _swig_property(_pynsx.IndexerParameters_nVertices_get, _pynsx.IndexerParameters_nVertices_set)
    __swig_setmethods__["subdiv"] = _pynsx.IndexerParameters_subdiv_set
    __swig_getmethods__["subdiv"] = _pynsx.IndexerParameters_subdiv_get
    if _newclass:
        subdiv = _swig_property(_pynsx.IndexerParameters_subdiv_get, _pynsx.IndexerParameters_subdiv_set)
    __swig_setmethods__["indexingTolerance"] = _pynsx.IndexerParameters_indexingTolerance_set
    __swig_getmethods__["indexingTolerance"] = _pynsx.IndexerParameters_indexingTolerance_get
    if _newclass:
        indexingTolerance = _swig_property(_pynsx.IndexerParameters_indexingTolerance_get, _pynsx.IndexerParameters_indexingTolerance_set)
    __swig_setmethods__["niggliTolerance"] = _pynsx.IndexerParameters_niggliTolerance_set
    __swig_getmethods__["niggliTolerance"] = _pynsx.IndexerParameters_niggliTolerance_get
    if _newclass:
        niggliTolerance = _swig_property(_pynsx.IndexerParameters_niggliTolerance_get, _pynsx.IndexerParameters_niggliTolerance_set)
    __swig_setmethods__["gruberTolerance"] = _pynsx.IndexerParameters_gruberTolerance_set
    __swig_getmethods__["gruberTolerance"] = _pynsx.IndexerParameters_gruberTolerance_get
    if _newclass:
        gruberTolerance = _swig_property(_pynsx.IndexerParameters_gruberTolerance_get, _pynsx.IndexerParameters_gruberTolerance_set)
    __swig_setmethods__["niggliReduction"] = _pynsx.IndexerParameters_niggliReduction_set
    __swig_getmethods__["niggliReduction"] = _pynsx.IndexerParameters_niggliReduction_get
    if _newclass:
        niggliReduction = _swig_property(_pynsx.IndexerParameters_niggliReduction_get, _pynsx.IndexerParameters_niggliReduction_set)
    __swig_setmethods__["minUnitCellVolume"] = _pynsx.IndexerParameters_minUnitCellVolume_set
    __swig_getmethods__["minUnitCellVolume"] = _pynsx.IndexerParameters_minUnitCellVolume_get
    if _newclass:
        minUnitCellVolume = _swig_property(_pynsx.IndexerParameters_minUnitCellVolume_get, _pynsx.IndexerParameters_minUnitCellVolume_set)
    __swig_setmethods__["unitCellEquivalenceTolerance"] = _pynsx.IndexerParameters_unitCellEquivalenceTolerance_set
    __swig_getmethods__["unitCellEquivalenceTolerance"] = _pynsx.IndexerParameters_unitCellEquivalenceTolerance_get
    if _newclass:
        unitCellEquivalenceTolerance = _swig_property(_pynsx.IndexerParameters_unitCellEquivalenceTolerance_get, _pynsx.IndexerParameters_unitCellEquivalenceTolerance_set)
    __swig_setmethods__["solutionCutoff"] = _pynsx.IndexerParameters_solutionCutoff_set
    __swig_getmethods__["solutionCutoff"] = _pynsx.IndexerParameters_solutionCutoff_get
    if _newclass:
        solutionCutoff = _swig_property(_pynsx.IndexerParameters_solutionCutoff_get, _pynsx.IndexerParameters_solutionCutoff_set)

    def __init__(self):
        this = _pynsx.new_IndexerParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pynsx.delete_IndexerParameters
    __del__ = lambda self: None
IndexerParameters_swigregister = _pynsx.IndexerParameters_swigregister
IndexerParameters_swigregister(IndexerParameters)

class AutoIndexer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoIndexer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoIndexer, name)
    __repr__ = _swig_repr

    def __init__(self, handler=0):
        this = _pynsx.new_AutoIndexer(handler)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def autoIndex(self, params):
        return _pynsx.AutoIndexer_autoIndex(self, params)

    def addPeak(self, peak):
        return _pynsx.AutoIndexer_addPeak(self, peak)

    def solutions(self):
        return _pynsx.AutoIndexer_solutions(self)
    __swig_destroy__ = _pynsx.delete_AutoIndexer
    __del__ = lambda self: None
AutoIndexer_swigregister = _pynsx.AutoIndexer_swigregister
AutoIndexer_swigregister(AutoIndexer)


def new_double():
    return _pynsx.new_double()
new_double = _pynsx.new_double

def get_value(arg1):
    return _pynsx.get_value(arg1)
get_value = _pynsx.get_value
# This file is compatible with both classic and new-style classes.


