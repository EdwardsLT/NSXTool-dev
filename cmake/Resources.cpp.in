// This file is generated by nsx resources generator

#include <fstream>
#include <sstream>
#include <stdexcept>

#include "Path.h"
#include "Resources.h"


namespace nsx {

std::map<std::pair<std::string,std::string>,resource_function> resources_map = {
};

const std::map<std::pair<std::string,std::string>,resource_function>& getResources()
{
    return resources_map;
}

YAML::Node findResource(const std::pair<std::string,std::string>& resource)
{
    auto it = resources_map.find(resource);

    if (it == resources_map.end()) {
        throw std::runtime_error("Unknown resource: "+resource.first+" - "+resource.second);
    }

    auto user_resource_dir = buildPath({applicationDataPath(),resource.first});
    auto user_resource_path = buildPath({user_resource_dir,resource.second+".yml"});
    if (!fileExists(user_resource_path)) {
        makeDirectory(user_resource_dir);
        std::ofstream fout(user_resource_path);
        fout << it->second();
        fout.close();
    }

    return YAML::LoadFile(user_resource_path);
}

std::vector<std::string> getResourcesName(const std::string& resource_type)
{
    std::vector<std::string> resources_name;
    
    for (auto p : resources_map) {
        if (p.first.first.compare(resource_type)==0) {
            resources_name.push_back(p.first.second);
        }
    }

    return resources_name;
}

} // end namespace nsx